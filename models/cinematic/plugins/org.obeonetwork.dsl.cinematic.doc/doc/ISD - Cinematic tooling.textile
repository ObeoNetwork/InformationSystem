__Copyright (c) 2008, 2024 Obeo -  All rights reserved. This program and the accompanying materials are made available under the terms of the Eclipse Public License v2.0__

h1. ISD - Outillage Cinematic

*Cinematic Designer* est un outil de conception d'écrans d'application, permettant de décrire la structure d'une IHM (modélisation statique) et son comportement (modélisation dynamique).

*Cinematic Designer* apporte le point de vue _Cinematic Views_ qui permet de :
* Modéliser des vues et des éléments de vues (les composants graphiques d'une IHM),
* Modéliser la structure de la disposition graphique sous une structure de type " Grid Layout ",
* Modéliser les états et le flot entre les états de l'application,
* Organiser les _Flows_ et les _View Elements_ en packages.

h2. Création d'un modèle Cinematic

Un assistant de création de modèles Cinematic est accessible via le menu :

bq. File > New > Other ... > Cinematic Model (Catégorie IS Designer)

Ou bien le menu contextuel sur un projet :

bq. New > Other ... > Cinematic Model (Catégorie IS Designer)

Ou encore le raccourci clavier

bq. Ctrl+N

!pics/Cinematic-ModelCreationWizard-01.jpg!

Cet assistant permet de définir 
* le nom du modèle à créer (l'extension du modèle est automatiquement ajoutée à la fin du nom en grisée et en italique s'il n'y a pas d'extension précisée),
* le projet ou répertoire de destination pour cette nouvelle ressource :

!pics/Cinematic-ModelCreationWizard-02.png!

La dernière page de l'assistant permet de définir le toolkit à utiliser, et d'initialiser le modèle avec un diagramme de Mockup et un diagramme de flow :

!pics/Cinematic-ModelCreationWizard-03.jpg!

Une fois l'assistant validé, le modèle est créé, ainsi que les représentations _Package Diagram_ et _UI Structure_. Les représentations demandées en création sont ouvertes pour commencer à modéliser.

!pics/Cinematic-ModelCreationWizard-04.jpg!

Lorsqu'un modèle cinematic est créé à l'aide de ce wizard, les points de vues _Cinematic Views_ et _Environment View_ sont activés.

Le point de vue _Cinematic Views_ permet de visualiser et modifier un modèle cinematic via plusieurs types de diagrammes tel que décrit dans la section suivante. Le point de vue _Environment View_ contient la définition des vues de propriétés avancées (EEF).

h2. Création d'un modèle Toolkits

Un assistant de création de modèles Toolkits est accessible via le menu :

bq. File > New > Other ... > Toolkits Model (Catégorie IS Designer)

!pics/Toolkits/Toolkit-ModelCreationWizard-01.png!

Cet assistant permet de définir 
* le nom du modèle à créer (l'extension du modèle est automatiquement ajoutée à la fin du nom en grisée et en italique s'il n'y a pas d'extension précisée),
* le projet ou répertoire de destination pour cette nouvelle ressource :

!pics/Toolkits/Toolkit-ModelCreationWizard-02.png!

Une fois l'assistant validé, le modèle est créé.

h2. Activation du point de vue

h3. Utilisation d'un modeling project

Si le fichier a été créé dans un modeling project, la seule étape nécessaire est l'activation du point de vue _Cinematic Views_. Pour ceci choisir _Viewpoints Selection_ dans le menu contextuel du _modeling project_.

!pics/Cinematic-ViewpointSelection.jpg!

h3. Utilisation d'un autre type de projet

Si le projet est d'un autre type, il manque alors un fichier _representations file_ (fichier .aird). L'action de menu contextuel @Configure > Convert to Modeling Project@  permet de remédier à cette situation.

Pour ajouter le modèle Cinematic à un _representations file_ existant, choisir _Add Model_ dans le menu contextuel du @Project Dependencies@, puis sélectionner la ressource du modèle Cinematic.

L'activation d'un point de vue se fait en choisissant _Viewpoints Selection_ dans le menu contextuel du projet.

h2. Fonctionnalités du modeleur

Le modeleur Cinematic apporte les représentations suivantes :

| **Package Diagram**        | : diagramme permettant de modéliser les Packages, Flows et ViewContainers. |
| **UI Structure**           | : représentation aborescente permettant de modéliser la description haut niveau statique de l'IHM. |
| **View Container Mockup**  | : diagramme permettant de modéliser la structure et l'apparence des IHM et éditer les bindings. |
| **Layout Diagram**         | : diagramme de consultation des composants et composites d'un Layout. |
| **Flow Diagram**           | : diagramme permettant de modéliser la dynamique de l'IHM. |

Les représentations suivantes peuvent être ouverts en mode "Vue Partielle". Le fonctionnement des Vues Partielles est décrit dans la section "ISD – Outillage environnement / Vues Partielles":../../org.obeonetwork.dsl.environment.design.doc/doc/ISD%20-%20Environment%20tooling.html#vues_partielles
* Flow Diagram
* Package Diagram

h3. Package Diagram

h4. Contenu

Le _Package Diagram_ est défini sur un objet de type Package, que nous appellerons par la suite package courant.

!{width:100%}pics/PackageDiagram/PackageDiagram-01.png!

Sont affichés sur ce diagramme :
* les _ViewContainer_ directement contenus par le package courant,
* les _Flows_ du package courant,
* les sous-packages fils du package courant, et leurs _ViewContainers_,
* les dépendances entre _Flows_, _ViewContainers_ et _Packages_ quand elles existent (activables/désactivables par le calque _Dependencies_).

Pour un _ViewContainer_, sont affichés :
* son nom,
* une icône représentant son type,
* les _View Elements_ directement contenus ou référencés,
* les _View Containers_ directement contenus ou référencés.

h4. Palette et outils

Les outils fournis par la palette sont :

| !pics/PackageDiagram/Palette-CreatePackage.png! | Création d'un _Package_. |
| !pics/PackageDiagram/Palette-CreateFlow.png! | Création d'un _Flow_. |
| !pics/PackageDiagram/Palette-CreateViewContainer.png! | Création d'un _View Container_. |

Les autres outils disponibles sont
* L'édition directe du label sur tous les éléments (sauf widgets et containers contenus ou référencés par un ViewContainer),
* La suppression des sous-packages, Flow et ViewContainer (mais pas de suppression du contenu d'un ViewContainer),
* Le calque _Dependencies_ pour afficher ou non les dépendances.

h4. Navigation vers d'autres diagrammes

La création d'un diagramme sur un _Package_, un _Flow_ ou un _View Container_ se fait par le menu contextuel _New > #Nom du diagramme#_.
La navigation vers un diagramme existant lié à un _Package_, un _Flow_ ou un _View Container_ se fait par le menu contextuel _Open > #Nom du diagramme#_.
Un double clic sur un _Package_, un _Flow_ ou un _View Container_ déclenche la création d'un diagramme si il n'existe pas, ou bien son ouverture si il existe.

h3. UI Structure

h4. Contenu

La représentation _UI Structure_ fournit une vue de haut niveau de la structure des écrans de l'application modélisée, sous forme arborescente.

Les écrans sont décrits en termes de _View Containers_ pouvant contenir :
* d’autres _View Containers_,
* des _View Container Reference_ représentant la réutilisation de _View Container_.
* les _ViewElements_ représentant les instances de widgets.

Les _View Containers_ peuvent être contenus dans des _Package_, permettant une structuration de ces différents éléments.

Cette représentation fournit en outre le moyen d’associer un toolkit au modèle Cinematic. Le toolkit est un modèle externe définissant les widgets utilisables pour la définition des écrans.

!pics/UIStructure/UIStructure.png!

Les éléments affichés sont :
* le _Package_ principal et ses sous-packages,
* les _View Containers_,
** quand un _View Container_ est référencé il apparaît également sous l'élément qui le référence. Ex : AdressePanel apparaît sous DetailPersonne. Dans ce cas, une indication permet de voir que le _View Container_ est simplement référencé et non pas contenu (mention dans le libellé et décorateur d'icône).
* les _ViewElements_ contenus dans les _ViewContainer_


h4. Palette et outils

Les outils disponibles sont :
* création / suppression de Package, ViewContainer et ViewElement,
* modification de ces éléments via des vues de propriétés avancées,
* déplacement et duplication d'élément dans l'arborescence.

h3. View Container Mockup

Cette représentation vient compléter la représentation _UI Structure_, apportant la modélisation de la disposition graphique des composants de l'IHM. Elle permet de créer et positionner les _View Elements_ dans les _View Containers_. De plus, elle permet d'éditer les bindings sur ces derniers.

h4. Eléments affichés et palette d'outils

La palette propose un outil de création de _View Element_ ou _View Container_ par widget disponible dans le toolkit utilisé. Son contenu dépend donc du toolkit actif sur le modèle Cinematic courant.

Voici les deux palettes dans le contexte des deux _Toolkits_ fournis avec le studio _IS-Designer_ :

| **Toolkit Web**                             |   | **Toolkit Swt** |
| !pics/MockupDiagram/Palette-WebToolkit.png! |   | !pics/MockupDiagram/Palette-SwtToolkit.png! |

Par défaut, le label des éléments présentés sur le View Container Mockup est déterminé de la manière suivante :
* Pour un _View Element_ ou un _View Container_ :
** Si l'attribut label est défini, alors il est utilisé,
** Sinon si l'attribut nom est défini alors il est utilisé,
** Sinon le label est vide.
* Pour un _View Container_
** Si l'attribut label est défini, alors il est utilisé,
** Sinon si le nom est défini alors il est utilisé,
** Sinon le label du View Container référencé est calculé comme ci-dessus et utilisé.

Le calque _Example_ modifie le label des _View Elements_, permettant de visualiser l’IHM avec des données d’exemple. Le label est alors calculé tel que défini dans le toolkit, par l'expression AQL " example " du widget.

| **Calque Example désactivé**                 |   | **Calque Example activé** |
| !pics/MockupDiagram/Mockup-DefaultLayer.png! |   | !pics/MockupDiagram/Mockup-ExampleLayer.png! |

Chaque repositionnement ou redimensionnement de _View Element_ sur ce diagramme déclenche la mise à jour de la structure de _Layout_ du _View Container_ représenté sur le diagramme :

!pics/MockupDiagram/Layout-ModelStructure.png!

La structure de _Layout_ porte les positionnements graphiques des éléments du Mockup, organisés en structure de type " Grid Layout ". Un élément de Layout est défini par une position (coordonnées x, y), une taille (largeur, hauteur), une direction (horizontale ou verticale) et une liste de Layout fils.
L'algorithme de mise à jour de la structure de Layout procède à une analyse de l'espace en passes successivement verticales et horizontales. Dans l'exemple ci-dessus, l'espace est découpé verticalement en quatre compartiments, dont le dernier est découpé horizontalement en deux compartiments lors d'une deuxième passe.

Le choix de direction est déterminé par la direction dans laquelle l'espace se découpe le plus, avec en cas d'égalité un choix par défaut en découpage vertical.

Un élément de _Layout_ peut être lié ou non à un _View Element_ suivant qu’il représente le Layout d’un _View Element_ ou bien le Layout d'un espace structurant (tel que le Layout qui englobe les deux boutons de l'exemple ci-dessus).

Le diagram _Layout Diagram_ permet de visualiser cette structure de Layout (décrit dans le chapitre suivant). 

h4. Edition de bindings

Afin d'éditer le binding d'un _ViewContainer_ ou d'un _ViewElement_, un menu "Binding..." s'affiche lors du clic droit sur ces éléments.
Cet action menu ouvre une fenêtre permettant d'éditer la sélection
i) dans le cas d'un ViewContainer: des types structurés liés:

!{width:40%}pics/MockupDiagram/ViewContainerBinding.png!

ii) dans le cas d'un ViewElement: des attributs ou références de types structurés liés. Ces types structurés doivent être préalablement liés à un ViewContainer parent du ViewElement.

!{width:40%}pics/MockupDiagram/ViewElementBinding.png!

Note: Lorsque des bindings sont définis sur un ViewElement ou un ViewContainer, le glisser-déposer de celui-ci sur un ViewContainer cible ne sera possible que si ses bindings restent valides avec la nouvelle cible. Ses bindings restent valides si leurs contextes liés aux BindingInfos associés aux ViewContainers parent (à l'élément à déplacer) sont conservés.

h4. Navigation vers d'autres diagrammes

Le double clic sur les éléments du diagramme de mockup permet de naviguer vers d'autres diagrammes en les créant à la volée si ils n'existent pas :
* depuis le _View Container_ racine vers le diagramme de Layout
* depuis un _View Container_ vers un sous diagramme de mockup
* depuis un _View Container Reference_ vers le diagramme de mockup du _View Container_ référencé

Lorsque des diagrammes sont créés pour un élément donné, ceux-ci sont navigables via le menu contextuel, dans le sous-menu _Open_.

h3. Layout Diagram

Ce diagramme a pour simple but de visualiser une structure de _Layout_. Il n'a pas vocation à éditer cette structure, et sa palette est vide.

L'action Preview Layout du menu contextuel sur le fond du diagramme permet d'appliquer les données de positionnement contenues dans les objets _Layout_ aux formes affichées sur le diagramme.

bq. IS Designer > Preview Layout
 
!pics/LayoutDiagram/LayoutDiagram-01.png!

Les Layouts liés à un View Element sont représentés avec une bordure en trait plein, ceux ayant pour rôle de structurer un compartiment de l’espace sont représentés avec une bordure en trait pointillé.

Les Layouts découpant l'espace verticalement sont présentés en rouge, ceux découpant l'espace horizontalement sont présentés en vert.

h3. Flow Diagram

h4. Contenu

Le _Flow Diagram_ est défini sur un élément de type Flow.

!{width:100%}pics/FlowDiagram/FlowDiagram-01.png!

Sont affichés sur ce diagramme :
* Les états du Flow (InitialState, FinalState, ViewState, ActionState, DecisionState, AsyncEventState, SubflowState).
** Les types d'état sont différenciés par l'utilisation d'icônes et de pictogrammes distinctifs.
* Les transitions du Flow
** Si la transition est déclenchée par un (des) événement(s), le label principal de la transition est de la forme _!pics/obj16/ViewEvent.gif! evenement1,evenement2_.
** Si une garde est présente elle est affichée en label secondaire sous la forme _[guard]_. 
** Si la transition est dirigée vers un _View State_, elle est représentée par une flèche pleine, sinon elle est représentée par une flèche pointillée.
* Un conteneur flottant nommé _FlowEvents_ présente les FlowEvents génériques du flow de portée globale qui représentent des événement logiques ou métier. Ce conteneur peut être masqué en désactivant le claque _Flow Events_. Les événements de "Flow Events" portent l'icône !pics/obj16/FlowEvent.gif! pour les distinguer des événements définis dans le toolkit qui portent l'icône !pics/obj16/WidgetEventType.gif!.
* Les ViewContainers référencés par les ViewState affichés. Ceux-ci peuvent être masqués par la désactivation du calque _View Containers_.
** Les informations affichées pour les _ViewContainer_ sont les mêmes que pour le diagramme de Package décrit plus haut.

h4. Palette et outils 

Les outils proposés par la palette sont :

| **States** |  |
| !pics/FlowDiagram/Palette-CreateTransition.png! | Tracée entre deux états, permet de créer une transition. Si la transition est issue d'un _View State_, déclenche l'ouverture de l'assistant de sélection d'événements déclencheurs. |
| !pics/FlowDiagram/Palette-CreateView.png! | Crée un _View State_. Déclenche l'ouverture de l'assistant de sélection de _View Container_. |
| !pics/FlowDiagram/Palette-CreateAction.png! | Crée un _Action State_. |
| !pics/FlowDiagram/Palette-CreateAsyncEvent.png! | Crée un _Async Event_. |
| !pics/FlowDiagram/Palette-CreateExistingFlow.png! | Crée un _Sub Flow State_ et affiche l'assistant de sélection de _Flow_ existant. |
| !pics/FlowDiagram/Palette-CreateNewFlow.png! | Crée un _Sub Flow State_ et l'associe à un nouveau _Flow_ créé  dans la même action. |
| **Ports** |  |
| !pics/FlowDiagram/Palette-CreateInitial.png! | Crée un _Initial State_. |
| !pics/FlowDiagram/Palette-CreateFinal.png! | Crée un _Final State_. |
| !pics/FlowDiagram/Palette-CreateAbort.png! | Crée un _Abort State_. |
| !pics/FlowDiagram/Palette-CreateDecision.png! | Crée un _Decision Node_. |
| **Events** |  |
| !pics/FlowDiagram/Palette-CreateFlowEvent.png! | Présent seulement si le calque _Flow Events_ est activé. Crée un _Flow Event_ dans le conteneur _Flow Events_. |
| **View Containers** |  |
| !pics/FlowDiagram/Palette-BindViewStateAndViewContainer.png! | Crée un lien d'association entre un _View State_ et un _View Container_ déjà présent sur le diagramme. |
| !pics/FlowDiagram/Palette-BindExistingViewContainer.png! | Crée un lien d'association entre un _View State_ et un _View Container_ existant. Déclenche l'affichage d'un dialogue de sélection de _View Container_. |
| !pics/FlowDiagram/Palette-BindNewViewContainer.png! | Crée un lien d'association entre un _View State_ et un _View Container_ créé dans la même action. Déclenche l'affichage d'un dialogue de sélection du _Widget_ dont le _View Container_ représentera une instance. |

Autres outils :

| Double clic sur une _Transition_ | : Ouvre le dialogue de sélection et de création d'événements déclencheurs |
| Double clic sur un _View State_  | : Ouvre le dialogue de sélection de _View Containers_ |
| Edition directe des libellés     | : Sur les états, les conditions de garde, les Flow Events et les View Containers |
| Reconnexion                      | : Des transitions |
| Suppression                      | : Les éléments du diagramme |

Outils de navigation :
* création / navigation vers le diagramme de flux pour un SubFlowState,
* création / navigation vers le diagramme contenant la description d'un ViewContainer (par menu contextuel et par double-clic),

Menu contextuel :
L'apparence d'un ViewState peut prendre celle du diagramme de Mockup du View Container qui lui est associé par l'action _Apply Mockup Image_ du menu contextuel, permettant d'obtenir ce genre de rendu visuel :
!{width:100%}pics/FlowDiagram/FlowDiagram-02.png!
L'action _Remove Mockup Image_ a pour effet de réinitialiser l'apparence du _View State_ à son apparence initiale.

**Dialogue de séléction d'événements déclencheurs:**
!{width:50%}pics/FlowDiagram/EventSelectionDialog.png!

Ce dialogue permet de séléctionner des types d'événements. Il présente l’ensemble des types d’événements supportés par les widgets utilisés dans le modèle Cinematic, ainsi que l’ensemble des événements logiques définis dans le Flow.
Les événements des widgets sont classés sous la hiérarchie des View Elements, les événements logiques sont regroupés sous un nœud virtuel « Flow events ».

Les événements déclencheurs de la transition sont cochés.

La zone de filtre textuel permet de réduire le contenu de l’arbre de manière à n’afficher que les éléments dont le label se conforme au filtre. L’affichage d’un élément dont le label se conforme au filtre entraîne cependant l’affichage des éléments parents jusqu’à la racine de l’arbre ainsi que tous ses éléments fils. Le métacaractère ‘*’ est supporté pour correspondre à une chaîne de caractères quelconque et '?' pour correspondre à un caractère quelconque.

La case à cocher « Hide non contextual View Containers » permet de cacher les View Containers qui ne sont pas liés au View State source de la transition. A l’affichage du dialogue elle est cochée si au moins un View Container est lié au View State source.

L’arbre de sélection d’événement permet une sélection multiple. Le dialogue peut donc être validé avec une sélection vide, simple ou multiple.

A la validation du dialogue,
* Pour chaque événement de la transition dont le type est non présent dans la sélection :
** L’événement est retiré de la liste des événements déclencheurs de la transition.
** Si un événement de vue n'est pas utilisé par d'autres transitions il est supprimé.
* Pour chaque type d’événement sélectionné :
** Si l’événement de vue correspondant au type d’événement n’existe pas dans le View Element, il est créé (avec un nom conforme au format <nom du widget>_<type d'événement>).
** L’événement correspondant au type d’événement est ajouté à la liste des événements déclencheurs de la transition.
** Si le View State source n’est pas lié au View Container du type d’événement sélectionné, ce lien est créé.

**Dialogue de séléction de ViewContainer:**
!{width:50%}pics/FlowDiagram/ViewContainerSelectionDialog.png!

Ce dialogue permet de séléctionner des View Containers. Il présente l’ensemble des View Containers du modèle Cinematic présentés sous leur hierarchie de contenance.

Les View Containers associés au View State concerné sont cochés.

La zone de filtre textuel permet de réduire le contenu de l’arbre de manière à n’afficher que les éléments dont le label se conforme au filtre. L’affichage d’un élément dont le label se conforme au filtre entraîne cependant l’affichage des éléments parents jusqu’à la racine de l’arbre ainsi que tous ses éléments fils. Le métacaractère ‘*’ est supporté pour correspondre à une chaîne de caractères quelconque et '?' pour correspondre à un caractère quelconque.

La case à cocher « Hide View Containers bound to other View States » permet de cacher les View Containers déjà liés à des View States. Elle est cochée à l’affichage du dialogue. Des containers déjà associés peuvent cependant être affichés malgré le filtre.

L'état partiellement coché d'une case indique que des sous éléments sont séléctionnés. Les éléments partiellement cochés ne font pas partie de la séléction prise en compte à la validation du dialogue.

A la validation du dialogue, la liste des éléments associés au View State est mise à jour avec la sélection faite par l’utilisateur.

h3. Création de toolkits

Un des objectifs du méta-modèle Cinematic est de permettre de créer facilement de nouveaux toolkits.

!pics/Toolkits/Toolkits-ClassDiagram.png!

De manière succincte, la création d'un toolkit consiste en la création de widgets, et sous chaque widget la création des types d'événements qu'il peut déclencher.

Par exemple, un toolkit peut contenir un widget _button_ avec un événement _buttonPressed_.

!pics/Toolkits/Toolkit-Example-Button-TreeView.png!

La création de toolkits est une tâche réalisée par l'équipe réalisant l'outillage de l'équipe d'analyse / conception / développement.
A ce titre, la définition de toolkits se fait par l'éditeur EMF arborescent classique.

Pour une meilleure expérience utilisateur il est possible d'associer une icône à chaque widget. Cette icône est affichée devant le nom des ViewElement utilisant le widget, et dans la palette du diagramme de Mockup.

Certains attributs du toolkit sont utilisés pour restituer des informations aux utilisateurs finaux
!pics/Toolkits/Toolkit-Example-Button-Properties.png!

Ainsi :

* **Summary** : est exploité en info bulle dans la palette du diagramme Mockup :
!pics/Toolkits/Toolkit-Example-Button-Summary.png!

* **Documentation** : Est affiché dans une aide sur les _ViewElements_ et _ViewContainers_ utilisant le Widget :
!pics/Toolkits/Toolkit-Example-Button-Documentation.png!

* **Metadata Definitions** : Défini une liste de clés et de valeurs par défaut pour des métadonnées. Ces données sont exploitées à la création d'un _View Element_ pour initialiser autant de meta-data dans le _ViewElement_ qu'il y a de valeurs définies dans l'attribut metadataDefinitions :

!pics/Toolkits/Toolkit-Example-Button-MetaDatas.png!

* **Metadata Help** : Défini une aide à l'usage des métadatas pour les _ViewElements_ et _ViewContainers_ utilisant le Widget :

!pics/Toolkits/Toolkit-Example-Button-MetadataHelp.png!

Un _Widget_ peut définir un style. Le style porte les attributs suivants :

* decorator : Chemin vers l’image svg qui décore le widget (cas de combo box, radio button, etc...)
* decoratorPosition : position cardinale du décorateur (east pour combo box, west pour radio button, etc...)
* decoratorVFill : booléen spécifiant si le décorateur doit suivre le redimensionnent vertical (valeur par défaut égale à vrai)
* decoratorHFill : booléen spécifiant si le décorateur doit suivre le redimensionnent horizontal (valeur par défaut égale à faux)
* bordered : booléen spécifiant si une bordure est visible (faux pour link ou pour label)
* roundedCorners : booléen spécifiant si les coins doivent être arrondis (vrai pour button)
* fontColor : couleur de la police de caractère utilisée pour le label. Les couleurs disponibles sont celles définies par la classe @org.eclipse.swt.SWT@ par les champs dont le nom commence par « COLOR_ ». Ainsi, une couleur désignée par la chaîne « BLACK » désigne le champ @org.eclipse.swt.SWT.COLOR_BLACK@.
* fontUnderlined : booléen spécifiant si la police de caractère utilisée pour le label est soulignée (vrai pour link)
* labelHAlignment : alignement du texte à gauche, droite, ou centre
* defaultWidth : largeur par défaut utilisée à la création d’un View Element
* defaultHeight : hauteur par défaut utilisée à la création d’un View Element
* exampleExpression : Expression AQL définie dans le contexte du _View Element_ (la variable self est instance de _View Element_), définissant le label des _View Elements_ sur le diagramme Mockup lorsque le calque _Example_ est activé
* labelHidden : booléen spécifiant si le label du _View Element_ représentant ce _Widget_ doit être caché (utile pour les conteneurs tel que Page, Panel, ...)

