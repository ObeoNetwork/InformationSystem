[comment encoding = UTF-8 /]
[comment
 Copyright (c) 2008, 2022 Obeo.
 All rights reserved. This program and the accompanying materials
 are made available under the terms of the Eclipse Public License v1.0
 which accompanies this distribution, and is available at
 http://www.eclipse.org/legal/epl-v10.html

 Contributors:
     Obeo - initial API and implementation
/]
[module ViewGen(
 'http://www.obeonetwork.org/dsl/database/evolution/1.0',
 'http://www.obeonetwork.org/dsl/database/1.0',
 'http://www.eclipse.org/emf/compare',
 'http://www.obeonetwork.org/dsl/typeslibrary/1.0')/]

[import org::obeonetwork::dsl::database::sqlgen::services::services /]
[import org::obeonetwork::dsl::database::sqlgen::services::names /]

[template public genSQLForViews(diffs : Sequence(DBDiff)) post(trim())]
[let addViewDiffs : Sequence(AddView) = diffs->filter(AddView)]
[if (addViewDiffs->notEmpty())]
	[file ('create-views.sql', false, 'UTF-8')]
		[for (addView : AddView | addViewDiffs)]
[addView.genCreateView()/]

		[/for]
	[/file]
[/if]
[/let]

[let removeViewDiffs : Sequence(RemoveView) = diffs->filter(RemoveView)]
[if (removeViewDiffs->notEmpty())]
	[file ('drop-views.sql', false, 'UTF-8')]
		[for (removeView : RemoveView | removeViewDiffs)]
[removeView.genDropView()/]

		[/for]
	[/file]
[/if]
[/let]

[let alterViewDiffs : Sequence(AlterView) = diffs->filter(AlterView)]
[if (alterViewDiffs->notEmpty())]
	[file ('alter-views.sql', false, 'UTF-8')]
		[for (alterView : AlterView | alterViewDiffs)]
[alterView.genAlterView()/]

		[/for]
	[/file]
[/if]
[/let]
[/template]

[comment ----------- TABLE ----------- /]
[template private genViewDoc(view : View) post(trim())]
-- ==============================================================
--  View : [view.name()/]                                    
-- ==============================================================
[/template]

[template private genDropView(removeView : RemoveView) post(trim())]
[let view : View = removeView.view.oclAsType(View)]
[view.genViewDoc()/]
DROP VIEW [view.fullname()/];
[/let]
[/template]

[template private getSchemaName(view : View) post(trim())]
[view.owner.oclAsType(Schema).name.toUpper()/]
[/template]

[template private genCreateView(addView : AddView) post(trim())]
[let view : View = addView.view.oclAsType(View)]
[view.genViewDoc()/]
[view.createViewStatement()/] AS [view.getViewQuery()/]
[view.genCreateViewComment()/]
[/let]
[/template]

[template private genAlterView(alterView : AlterView) post(trim())]
[alterView.view.alterViewStatement(alterView.target.oclAsType(View))/]
[/template]

[template private alterViewStatement(newView : View, oldView : View)]
[newView.genViewDoc()/]
DROP VIEW [oldView.fullname()/];
[newView.createViewStatement()/] AS [newView.getViewQuery()/]
[newView.genCreateViewComment()/]
[/template]

[template private createViewStatement(view : View)? (not view.isTargetSqlServer())]
CREATE OR REPLACE VIEW [view.fullname()/]
[/template]

[template private createViewStatement(view : View)? (view.isTargetSqlServer())]
CREATE VIEW [view.fullname()/]
[/template]

[template private genCreateViewComment(view : View) ? (view.comments<>null and view.comments.size()>0) post(trim())]
COMMENT ON VIEW [view.fullname()/] IS '[view.comments.replaceAll('\'','\'\'')/]';
[/template]
