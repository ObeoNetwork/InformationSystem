[comment encoding = UTF-8 /]
[comment
 Copyright (c) 2008, 2025 Obeo.
 All rights reserved. This program and the accompanying materials
 are made available under the terms of the Eclipse Public License v2.0
 which accompanies this distribution, and is available at
 https://www.eclipse.org/legal/epl-2.0/

 Contributors:
     Obeo - initial API and implementation
/]
[module ForeignKeyGen(
 'http://www.obeonetwork.org/dsl/database/evolution/1.0',
 'http://www.obeonetwork.org/dsl/database/1.0',
 'http://www.eclipse.org/emf/compare',
 'http://www.obeonetwork.org/dsl/typeslibrary/1.0')/]

[import org::obeonetwork::dsl::database::sqlgen::services::names /]
[import org::obeonetwork::dsl::database::sqlgen::services::services /]

[template public genSQLForForeignKeys(diffs : Sequence(DBDiff)) post(trim())]
[let addFKDiffs : Sequence(AddForeignKey) = diffs->filter(AddForeignKey)]
[if (addFKDiffs->notEmpty())]
	[file ('create-fk.sql', false, 'UTF-8')]
		[for (addFk : AddForeignKey | addFKDiffs)]
[addFk.genCreateFK()/]

		[/for]
	[/file]
[/if]
[/let]

[let removeFKDiffs : Sequence(RemoveForeignKey) = diffs->filter(RemoveForeignKey)]
[if (removeFKDiffs->notEmpty())]
	[file ('drop-fk.sql', false, 'UTF-8')]
		[for (removeFK : RemoveForeignKey | removeFKDiffs)]
[removeFK.genDropFK()/]

		[/for]
	[/file]
[/if]
[/let]

[let alterFKDiffs : Sequence(UpdateForeignKey) = diffs->filter(UpdateForeignKey)]
[if (alterFKDiffs->notEmpty())]
	[file ('alter-fk.sql', false, 'UTF-8')]
		[for (updateFK : UpdateForeignKey | alterFKDiffs)]
[updateFK.genAlterFK()/]

		[/for]
	[/file]
[/if]
[/let]
[/template]

[template private genFKDoc(foreignKey : ForeignKey) post(trim())]
-- ==============================================================
--  Foreign Key : [foreignKey.name/]                                    
-- ==============================================================
[/template]

[template private genCreateFK(addFK : AddForeignKey) post(trim())]
[addFK.foreignKey.oclAsType(ForeignKey).genFKDoc()/]
[addFK.foreignKey.oclAsType(ForeignKey).genCreateFK()/]
[/template]

[template private genDropFK(removeFK : RemoveForeignKey) post(trim())]
[removeFK.foreignKey.oclAsType(ForeignKey).genFKDoc()/]
[removeFK.foreignKey.oclAsType(ForeignKey).genDropFK()/]
[/template]

[template private genAlterFK(updateFK : UpdateForeignKey) post(trim())]
[updateFK.newForeignKey.oclAsType(ForeignKey).genFKDoc()/]
[updateFK.foreignKey.oclAsType(ForeignKey).genDropFK()/]
[updateFK.newForeignKey.oclAsType(ForeignKey).genCreateFK()/]
[/template]

[template private genCreateFK(fk : ForeignKey) post(trim())]
[if (fk.elements->forAll(not pkColumn.oclIsUndefined()))]
[let sourceTable : Table = fk.owner]
[let targetTable : Table = fk.elements.pkColumn->first().owner.oclAsType(Table)]
ALTER TABLE [sourceTable.fullname()/] 
	ADD CONSTRAINT [fk.name/] FOREIGN KEY([fk.elements.fkColumn.name->sep(', ')/]) 
	REFERENCES [targetTable.fullname()/]([fk.elements.pkColumn.name->sep(', ')/]);[/let][/let]
[/if]
[/template]

[template private genDropFK(fk : ForeignKey) post(trim())]
[let table : Table = fk.owner]
ALTER TABLE [table.fullname()/] DROP CONSTRAINT [fk.name/];[/let]
[/template]
