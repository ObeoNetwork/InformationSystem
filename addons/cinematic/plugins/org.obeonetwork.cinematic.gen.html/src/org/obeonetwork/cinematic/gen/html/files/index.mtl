[comment encoding = UTF-8 /]
[comment
 Copyright (c) 2008, 2023 Obeo.
 All rights reserved. This program and the accompanying materials
 are made available under the terms of the Eclipse Public License v2.0
 which accompanies this distribution, and is available at
 https://www.eclipse.org/legal/epl-2.0/

 Contributors:
     Obeo - initial API and implementation
/]
[**
 * The documentation of the module index.
 */]
[module index('http://www.obeonetwork.org/dsl/cinematic/3.0.0')]

[import org::obeonetwork::cinematic::gen::html::requests::requests /]
[import org::obeonetwork::cinematic::gen::html::common::common /]
[import org::obeonetwork::cinematic::gen::html::services::cinematicServices /]

[**
 * The documentation of the template index.
 * @param index
 */]
[template public index(aCinematicRoot : CinematicRoot)]
	[file ('index.html', false, 'UTF-8')]
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="fr">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>Index</title>
<link href="bootstrap/css/bootstrap.min.css" rel="stylesheet" >
<style>
      body {
        padding-top: 60px; /* 60px to make the container go all the way to the bottom of the topbar */
      }
</style>
<link href="bootstrap/css/bootstrap-responsive.min.css" rel="stylesheet">
</head>
<body>
	
	<div class="navbar navbar-fixed-top">
		<div class="navbar-inner">
			<div class="container">
				<a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
		        	<span class="icon-bar"></span>
		            <span class="icon-bar"></span>
		            <span class="icon-bar"></span>
		        </a>
				<a class="brand" href="#">Index</a>
				<div class="nav-collapse collapse">
		            <ul class="nav">
		              [for (aFlow : Flow | aCinematicRoot.eAllContents(Flow))]
					  <li class="dropdown">
				        <a class="dropdown-toggle" data-toggle="dropdown" href="#">[aFlow.name/] <b class="caret"></b></a>
				        <ul class="dropdown-menu">
				          [for (aViewState : ViewState | aFlow.states->filter(ViewState))]
							<li><a href="[aViewState.genFullQualifiedFileName()/]">[aViewState.name/]</a></li>
						  [/for]
				        </ul>
				      </li>
					  [/for]
		            </ul>
         		 </div>
			</div>
		</div>
	</div>
	
	<div class="container">
			
			<h1>Project : [aCinematicRoot.name/]</h1>

			<ul>
				<li>
					<h2>Starting points</h2>
					<ul>
						[for (aFlowState : FlowState | aCinematicRoot.getInitialFlowStates())]
						<li>Flow [aFlowState.eContainer(Flow).name/] : <a href="[aFlowState.genFullQualifiedFileName()/]">[aFlowState.getName()/]</a></li>
						[/for]
					</ul>
				</li>
			</ul>
			<ul>
				<li>
					ViewState Pages
					<ul>
						[for (aViewState : ViewState | aCinematicRoot.eAllContents(ViewState))]
						<li><a href="[aViewState.genFullQualifiedFileName()/]">[aViewState.name/]</a></li>
						[/for]
					</ul>
				</li>
				<li>
					ActionState Pages
					<ul>
						[for (aActionState : ActionState | aCinematicRoot.eAllContents(ActionState))]
						<li><a href="[aActionState.genFullQualifiedFileName()/]">[aActionState.name/]</a></li>
						[/for]
					</ul>
				</li>
				<li>
					Multiple Transitions Pages
					<ul>
						[for (aViewState : ViewState | aCinematicRoot.eAllContents(ViewState))]
							[for (aEvent : FlowEvent | aViewState.eContainer(Flow).events)]
								[if (aViewState.hasMultipleTransitionsForEvent(aEvent))]
							<li><a href="[aViewState.genFullQualifiedFileName(aEvent)/]">[aViewState.name/] on [aEvent.name/] event</a></li>
								[/if]
							[/for]
						[/for]
					</ul>
				</li>
			</ul>
		
		</div>

		<script src="bootstrap/js/jquery.js"></script>
		<script src="bootstrap/js/bootstrap.min.js"></script>

	</body>
</html>
	[/file]
[/template]

[query public getInitialStates(aCinematicRoot : CinematicRoot) : Sequence(InitialState) = 
aCinematicRoot.eAllContents(InitialState)->select(is : InitialState | is.eContainer(CinematicRoot).eAllContents(SubflowState)->select(subflow = is.eContainer(Flow))->isEmpty())
/]

[query public getInitialFlowStates(aCinematicRoot : CinematicRoot) : Sequence(FlowState) = 
aCinematicRoot.getInitialStates().getNextStates(null) /]

