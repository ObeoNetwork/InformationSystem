openapi: 3.1.0
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.\
    \  You can find out more about\nSwagger at [http://swagger.io](http://swagger.io).\
    \ In the third iteration of the pet store, we've switched to the design first\
    \ approach!\nYou can now help us improve the API whether it's by making changes\
    \ to the definition itself or to the code.\nThat way, with time, we can improve\
    \ the API in general, and expose some of the new features in OAS3.\n\nSome useful\
    \ links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n\
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml) "
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.5-SNAPSHOT
servers:
- url: /v3
tags:
- name: User
  description: Access to Petstore orders
- name: Store
  description: Operations about user
- name: Pet
  description: Everything about your Pets
paths:
  /user:
    post:
      tags:
      - User
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
      - User
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        "200":
          description: "OK\n\nSuccessful operation"
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
      x-swagger-router-controller: UserController
  /user/login:
    get:
      tags:
      - User
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: false
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: false
        schema:
          type: string
      responses:
        "200":
          description: "OK\n\nsuccessful operation"
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        "400":
          description: "Bad Request\n\nInvalid username/password supplied"
  /user/logout:
    get:
      tags:
      - User
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
      - User
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "OK\n\nsuccessful operation"
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: "Bad Request\n\nInvalid username supplied"
        "404":
          description: "Not Found\n\nUser not found"
    put:
      tags:
      - User
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be deleted
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
      x-swagger-router-controller: UserController
    delete:
      tags:
      - User
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        "400":
          description: "Bad Request\n\nInvalid username supplied"
        "404":
          description: "Not Found\n\nUser not found"
  /store/inventory:
    get:
      tags:
      - Store
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        "200":
          description: "OK\n\nsuccessful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store_GetInventoryOutput200'
      security:
      - api_key: []
      x-swagger-router-controller: OrderController
  /store/order:
    post:
      tags:
      - Store
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        "200":
          description: "OK\n\nsuccessful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        "405":
          description: "Method Not Allowed\n\nInvalid input"
      x-swagger-router-controller: OrderController
  /store/order/{orderId}:
    get:
      tags:
      - Store
      description: For valid response try integer IDs with value <= 5 or > 10. Other
        values will generated exceptions
      operationId: getOrderById
      parameters:
      - name: orderId
        in: path
        description: ID of order that needs to be fetched
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: "OK\n\nsuccessful operation"
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        "400":
          description: "Bad Request\n\nInvalid ID supplied"
        "404":
          description: "Not Found\n\nOrder not found"
      x-swagger-router-controller: OrderController
    delete:
      tags:
      - Store
      description: For valid response try integer IDs with value < 1000. Anything
        above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
      - name: orderId
        in: path
        description: ID of the order that needs to be deleted
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: "Bad Request\n\nInvalid ID supplied"
        "404":
          description: "Not Found\n\nOrder not found"
      x-swagger-router-controller: OrderController
  /pet:
    put:
      tags:
      - Pet
      description: Update an existing pet by Id
      operationId: updatePet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        "200":
          description: "OK\n\nSuccessful operation"
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        "400":
          description: "Bad Request\n\nInvalid ID supplied"
        "404":
          description: "Not Found\n\nPet not found"
        "405":
          description: "Method Not Allowed\n\nValidation exception"
      security:
      - petstore_auth:
        - write:pets
        - read:pets
    post:
      tags:
      - Pet
      description: Add a new pet to the store
      operationId: addPet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        "200":
          description: "OK\n\nSuccessful operation"
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        "405":
          description: "Method Not Allowed\n\nInvalid input"
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /pet/findByStatus:
    get:
      tags:
      - Pet
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: false
        schema:
          $ref: '#/components/schemas/Pet_FindPetsByStatusStatus'
      - name: page
        in: query
        description: The index of the page queried
        required: false
        schema:
          type: integer
          format: int64
      - name: size
        in: query
        description: The number of elements per page
        required: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: "OK\n\nsuccessful operation"
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        "400":
          description: "Bad Request\n\nInvalid status value"
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      x-pagination: this is a pagination-related property extension
  /pet/findByTags:
    get:
      tags:
      - Pet
      description: "Multiple tags can be provided with comma separated strings. Use\
        \ tag1, tag2, tag3 for testing."
      operationId: findPetsByTags
      parameters:
      - name: tags
        in: query
        description: Tags to filter by
        required: false
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: "OK\n\nsuccessful operation"
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        "400":
          description: "Bad Request\n\nInvalid tag value"
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /pet/{petId}:
    get:
      tags:
      - Pet
      description: Returns a single pet
      operationId: getPetById
      parameters:
      - name: petId
        in: path
        description: ID of pet to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: "OK\n\nsuccessful operation"
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        "400":
          description: "Bad Request\n\nInvalid ID supplied"
        "404":
          description: "Not Found\n\nPet not found"
      security:
      - api_key: []
      - petstore_auth:
        - write:pets
        - read:pets
    post:
      tags:
      - Pet
      operationId: updatePetWithForm
      parameters:
      - name: petId
        in: path
        description: ID of pet that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      - name: name
        in: query
        description: Name of pet that needs to be updated
        required: false
        schema:
          type: string
      - name: status
        in: query
        description: Status of pet that needs to be updated
        required: false
        schema:
          type: string
      responses:
        "405":
          description: "Method Not Allowed\n\nInvalid input"
      security:
      - petstore_auth:
        - write:pets
        - read:pets
    delete:
      tags:
      - Pet
      operationId: deletePet
      parameters:
      - name: api_key
        in: header
        required: false
        schema:
          type: string
      - name: petId
        in: path
        description: Pet id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: "Bad Request\n\nInvalid pet value"
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /pet/{petId}/uploadImage:
    post:
      tags:
      - Pet
      operationId: uploadFile
      parameters:
      - name: petId
        in: path
        description: ID of pet to update
        required: true
        schema:
          type: integer
          format: int64
      - name: additionalMetadata
        in: query
        description: Additional Metadata
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: "OK\n\nsuccessful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - petstore_auth:
        - write:pets
        - read:pets
components:
  schemas:
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    Category:
      type: object
      properties:
        name:
          type: string
        id:
          type: integer
          format: int64
      x-swagger-router-model: io.swagger.petstore.model.Category
    Order:
      type: object
      properties:
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        id:
          type: integer
          format: int64
        shipDate:
          type: string
          format: date-time
        complete:
          type: boolean
        status:
          $ref: '#/components/schemas/OrderStatus'
      x-swagger-router-model: io.swagger.petstore.model.Order
    OrderStatus:
      type: string
      description: Order Status
      enum:
      - approved
      - placed
      - delivered
    Pet:
      type: object
      properties:
        photoUrls:
          type: array
          items:
            type: string
          minItems: 1
        name:
          type: string
        id:
          type: integer
          format: int64
        status:
          $ref: '#/components/schemas/PetStatus'
        category:
          $ref: '#/components/schemas/Category'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
      required:
      - name
      - photoUrls
      x-swagger-router-model: io.swagger.petstore.model.Pet
    PetStatus:
      type: string
      description: pet status in the store
      enum:
      - sold
      - pending
      - available
    Pet_FindPetsByStatusStatus:
      type: string
      enum:
      - sold
      - pending
      - available
    Store_GetInventoryOutput200:
      type: object
    Tag:
      type: object
      properties:
        name:
          type: string
        id:
          type: integer
          format: int64
      x-swagger-router-model: io.swagger.petstore.model.Tag
    User:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
        phone:
          type: string
        id:
          type: integer
          format: int64
        email:
          type: string
        username:
          type: string
      x-swagger-router-model: io.swagger.petstore.model.User
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: key
      in: header
