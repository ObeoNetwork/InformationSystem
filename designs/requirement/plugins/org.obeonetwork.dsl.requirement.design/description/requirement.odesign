<?xml version="1.0" encoding="ASCII"?>
<description:Group xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:description="http://www.eclipse.org/sirius/description/1.1.0" xmlns:description_1="http://www.eclipse.org/sirius/table/description/1.1.0" xmlns:description_2="http://www.eclipse.org/sirius/diagram/description/1.1.0" xmlns:properties="http://www.eclipse.org/sirius/properties/1.0.0" xmlns:properties-ext-widgets-reference="http://www.eclipse.org/sirius/properties/1.0.0/ext/widgets/reference" xmlns:tool="http://www.eclipse.org/sirius/description/tool/1.1.0" documentation="Copyright (c) 2008, 2024 Obeo.&#xD;&#xA;All rights reserved. This program and the accompanying materials&#xD;&#xA;are made available under the terms of the Eclipse Public License v2.0&#xD;&#xA;which accompanies this distribution, and is available at&#xD;&#xA;https://www.eclipse.org/legal/epl-2.0/&#xD;&#xA;&#xD;&#xA;Contributors:&#xD;&#xA;   Obeo - initial API and implementation" name="requirements" version="12.0.0.2017041100">
  <ownedViewpoints endUserDocumentation="The &lt;b>Requirements&lt;/b> viewpoint provides two representations : &#xD;&#xA;&lt;ul>&#xD;&#xA;&lt;li>&lt;b>Requirements Table&lt;/b> : a table allowing to edit the requirements,&lt;/li>&#xD;&#xA;&lt;li>&lt;b>Requirements Traceability Matrix&lt;/b> : a table tracing the relations between objects and requirements.&lt;/li>&#xD;&#xA;&lt;/ul>&#xA;" name="Requirements">
    <ownedRepresentations xsi:type="description_1:EditionTableDescription" name="Requirements Table" titleExpression="aql:self.name + ' Requirements Table'" domainClass="requirement::CategoriesContainer" initialHeaderColumnWidth="80">
      <ownedLineMappings name="REQ_CategoriesContainer" domainClass="requirement::CategoriesContainer" semanticCandidatesExpression="var:self" headerLabelExpression="feature:name">
        <ownedSubLines name="REQ_Requirement" reusedInMappings="//@ownedViewpoints[name='Requirements']/@ownedRepresentations[name='Requirements%20Table']/@ownedLineMappings[name='REQ_CategoriesContainer']/@ownedSubLines[name='REQ_Category']" domainClass="requirement::Requirement" semanticCandidatesExpression="service:getRequirements" headerLabelExpression="service:getRequirementsLabel()">
          <create name="REQ_Requirement" label="Create Requirement" forceRefresh="true" elementsToSelect="service:stdEmptyCollection">
            <variables name="root" documentation="The semantic element of the table."/>
            <variables name="element" documentation="The semantic currently edited element."/>
            <variables name="container" documentation="The semantic element corresponding to the view container."/>
            <firstModelOperation xsi:type="tool:ChangeContext" browseExpression="var:container">
              <subModelOperations xsi:type="tool:CreateInstance" typeName="requirement.Requirement" referenceName="requirements">
                <subModelOperations xsi:type="tool:SetValue" featureName="id" valueExpression="aql:self.eContainer(requirement::Category).id + '_' + self.eContainer(requirement::Category).requirements->size()"/>
                <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="New requirement"/>
              </subModelOperations>
            </firstModelOperation>
          </create>
          <create name="REQ_CreateCategory" label="Create Category" forceRefresh="true" elementsToSelect="service:stdEmptyCollection" mapping="//@ownedViewpoints[name='Requirements']/@ownedRepresentations[name='Requirements%20Table']/@ownedLineMappings[name='REQ_CategoriesContainer']/@ownedSubLines[name='REQ_Category']">
            <variables name="root" documentation="The semantic element of the table."/>
            <variables name="element" documentation="The semantic currently edited element."/>
            <variables name="container" documentation="The semantic element corresponding to the view container."/>
            <firstModelOperation xsi:type="tool:ChangeContext" browseExpression="var:container">
              <subModelOperations xsi:type="tool:CreateInstance" typeName="requirement::Category" referenceName="subCategories">
                <subModelOperations xsi:type="tool:SetValue" featureName="id" valueExpression="aql:'CAT' + self.eContainer(requirement::Category).subCategories->size()"/>
                <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="New category"/>
              </subModelOperations>
            </firstModelOperation>
          </create>
          <create name="REQ_CopyRequirement1" label="Copy Requirement" forceRefresh="true" elementsToSelect="service:stdEmptyCollection">
            <variables name="root" documentation="The semantic element of the table."/>
            <variables name="element" documentation="The semantic currently edited element."/>
            <variables name="container" documentation="The semantic element corresponding to the view container."/>
            <firstModelOperation xsi:type="tool:ChangeContext" browseExpression="service:copyRequirement"/>
          </create>
          <create name="REQ_moveRequirement1" label="Move Requirement" forceRefresh="true" elementsToSelect="service:stdEmptyCollection">
            <variables name="root" documentation="The semantic element of the table."/>
            <variables name="element" documentation="The semantic currently edited element."/>
            <variables name="container" documentation="The semantic element corresponding to the view container."/>
            <firstModelOperation xsi:type="tool:ChangeContext" browseExpression="service:moveRequirement"/>
          </create>
        </ownedSubLines>
        <ownedSubLines name="REQ_Category" reusedSubLines="//@ownedViewpoints[name='Requirements']/@ownedRepresentations[name='Requirements%20Table']/@ownedLineMappings[name='REQ_CategoriesContainer']/@ownedSubLines[name='REQ_Category'] //@ownedViewpoints[name='Requirements']/@ownedRepresentations[name='Requirements%20Table']/@ownedLineMappings[name='REQ_CategoriesContainer']/@ownedSubLines[name='REQ_Requirement']" reusedInMappings="//@ownedViewpoints[name='Requirements']/@ownedRepresentations[name='Requirements%20Table']/@ownedLineMappings[name='REQ_CategoriesContainer']/@ownedSubLines[name='REQ_Category']" domainClass="requirement::Category" semanticCandidatesExpression="service:getCategories" headerLabelExpression="service:getRequirementsLabel()">
          <create name="REQ_Requirement" label="Create Requirement" forceRefresh="true" elementsToSelect="service:stdEmptyCollection" mapping="//@ownedViewpoints[name='Requirements']/@ownedRepresentations[name='Requirements%20Table']/@ownedLineMappings[name='REQ_CategoriesContainer']/@ownedSubLines[name='REQ_Requirement']">
            <variables name="root" documentation="The semantic element of the table."/>
            <variables name="element" documentation="The semantic currently edited element."/>
            <variables name="container" documentation="The semantic element corresponding to the view container."/>
            <firstModelOperation xsi:type="tool:ChangeContext" browseExpression="var:element">
              <subModelOperations xsi:type="tool:CreateInstance" typeName="requirement.Requirement" referenceName="requirements">
                <subModelOperations xsi:type="tool:SetValue" featureName="id" valueExpression="aql:self.eContainer(requirement::Category).id + '_' + self.eContainer(requirement::Category).requirements->size()"/>
                <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="New requirement"/>
              </subModelOperations>
            </firstModelOperation>
          </create>
          <create name="REQ_CreateCategory" label="Create Category" forceRefresh="true" elementsToSelect="service:stdEmptyCollection" mapping="//@ownedViewpoints[name='Requirements']/@ownedRepresentations[name='Requirements%20Table']/@ownedLineMappings[name='REQ_CategoriesContainer']/@ownedSubLines[name='REQ_Category']">
            <variables name="root" documentation="The semantic element of the table."/>
            <variables name="element" documentation="The semantic currently edited element."/>
            <variables name="container" documentation="The semantic element corresponding to the view container."/>
            <firstModelOperation xsi:type="tool:ChangeContext" browseExpression="var:element">
              <subModelOperations xsi:type="tool:CreateInstance" typeName="requirement.Category" referenceName="subCategories">
                <subModelOperations xsi:type="tool:SetValue" featureName="id" valueExpression="aql:self.eContainer(requirement::Category).id + '_' + self.eContainer(requirement::CategoriesContainer).ownedCategories->size()"/>
                <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="New category"/>
              </subModelOperations>
            </firstModelOperation>
          </create>
          <create name="REQ_CopyCategory" label="Copy Category" forceRefresh="true" elementsToSelect="service:stdEmptyCollection" mapping="//@ownedViewpoints[name='Requirements']/@ownedRepresentations[name='Requirements%20Table']/@ownedLineMappings[name='REQ_CategoriesContainer']/@ownedSubLines[name='REQ_Category']">
            <variables name="root" documentation="The semantic element of the table."/>
            <variables name="element" documentation="The semantic currently edited element."/>
            <variables name="container" documentation="The semantic element corresponding to the view container."/>
            <firstModelOperation xsi:type="tool:ChangeContext" browseExpression="service:copyCategory"/>
          </create>
          <create name="REQ_moveCategory" label="Move Category" forceRefresh="true" elementsToSelect="service:stdEmptyCollection" mapping="//@ownedViewpoints[name='Requirements']/@ownedRepresentations[name='Requirements%20Table']/@ownedLineMappings[name='REQ_CategoriesContainer']/@ownedSubLines[name='REQ_Category']">
            <variables name="root" documentation="The semantic element of the table."/>
            <variables name="element" documentation="The semantic currently edited element."/>
            <variables name="container" documentation="The semantic element corresponding to the view container."/>
            <firstModelOperation xsi:type="tool:ChangeContext" browseExpression="service:moveCategory"/>
          </create>
        </ownedSubLines>
        <create name="REQ_CreateCategory1" label="Create Category" forceRefresh="true" elementsToSelect="service:stdEmptyCollection" mapping="//@ownedViewpoints[name='Requirements']/@ownedRepresentations[name='Requirements%20Table']/@ownedLineMappings[name='REQ_CategoriesContainer']/@ownedSubLines[name='REQ_Category']">
          <variables name="root" documentation="The semantic element of the table."/>
          <variables name="element" documentation="The semantic currently edited element."/>
          <variables name="container" documentation="The semantic element corresponding to the view container."/>
          <firstModelOperation xsi:type="tool:ChangeContext" browseExpression="var:element">
            <subModelOperations xsi:type="tool:If" conditionExpression="aql:element.oclIsKindOf(requirement::Category)">
              <subModelOperations xsi:type="tool:CreateInstance" typeName="requirement.Category" referenceName="subCategories">
                <subModelOperations xsi:type="tool:SetValue" featureName="id" valueExpression="aql:self.eContainer(requirement::Category).id + '_' + self.eContainer(requirement::CategoriesContainer).ownedCategories->size()"/>
                <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="New category"/>
              </subModelOperations>
            </subModelOperations>
            <subModelOperations xsi:type="tool:If" conditionExpression="aql:element.oclIsKindOf(requirement::Repository)">
              <subModelOperations xsi:type="tool:CreateInstance" typeName="requirement::Category" referenceName="mainCategories">
                <subModelOperations xsi:type="tool:SetValue" featureName="id" valueExpression="aql:'CAT' + self.eContainer(requirement::CategoriesContainer).ownedCategories->size()"/>
                <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="New category"/>
              </subModelOperations>
            </subModelOperations>
          </firstModelOperation>
        </create>
        <create name="REQ_Requirement1" label="Create Requirement" precondition="aql:container.oclIsKindOf(requirement::Category)" forceRefresh="true" elementsToSelect="service:stdEmptyCollection" mapping="//@ownedViewpoints[name='Requirements']/@ownedRepresentations[name='Requirements%20Table']/@ownedLineMappings[name='REQ_CategoriesContainer']/@ownedSubLines[name='REQ_Requirement']">
          <variables name="root" documentation="The semantic element of the table."/>
          <variables name="element" documentation="The semantic currently edited element."/>
          <variables name="container" documentation="The semantic element corresponding to the view container."/>
          <firstModelOperation xsi:type="tool:ChangeContext" browseExpression="var:container">
            <subModelOperations xsi:type="tool:CreateInstance" typeName="requirement.Requirement" referenceName="requirements">
              <subModelOperations xsi:type="tool:SetValue" featureName="id" valueExpression="aql:self.eContainer(requirement::Category).id + '_' + self.eContainer(requirement::Category).requirements->size()"/>
              <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="New requirement"/>
            </subModelOperations>
          </firstModelOperation>
        </create>
        <create name="REQ_CopyCategory1" label="Copy Category" precondition="aql:container.oclIsKindOf(requirement::Category)" forceRefresh="true" elementsToSelect="service:stdEmptyCollection" mapping="//@ownedViewpoints[name='Requirements']/@ownedRepresentations[name='Requirements%20Table']/@ownedLineMappings[name='REQ_CategoriesContainer']/@ownedSubLines[name='REQ_Category']">
          <variables name="root" documentation="The semantic element of the table."/>
          <variables name="element" documentation="The semantic currently edited element."/>
          <variables name="container" documentation="The semantic element corresponding to the view container."/>
          <firstModelOperation xsi:type="tool:ChangeContext" browseExpression="service:copyCategory"/>
        </create>
        <create name="REQ_moveCategory1" label="Move Category" precondition="aql:container.oclIsKindOf(requirement::Category)" forceRefresh="true" elementsToSelect="service:stdEmptyCollection" mapping="//@ownedViewpoints[name='Requirements']/@ownedRepresentations[name='Requirements%20Table']/@ownedLineMappings[name='REQ_CategoriesContainer']/@ownedSubLines[name='REQ_Category']">
          <variables name="root" documentation="The semantic element of the table."/>
          <variables name="element" documentation="The semantic currently edited element."/>
          <variables name="container" documentation="The semantic element corresponding to the view container."/>
          <firstModelOperation xsi:type="tool:ChangeContext" browseExpression="service:moveCategory"/>
        </create>
      </ownedLineMappings>
      <ownedColumnMappings name="REQ_ID" label="" headerLabelExpression="ID" initialWidth="80" featureName="id"/>
      <ownedColumnMappings name="REQ_Name" label="" headerLabelExpression="Name" initialWidth="80" featureName="name" labelExpression="aql:if lineSemantic.oclIsKindOf(requirement::Category) or lineSemantic.oclIsKindOf(requirement::Requirement) then lineSemantic.oclAsType(requirement::NamedElement).name else '' endif"/>
      <ownedColumnMappings name="REQ_Type" label="" headerLabelExpression="Type" initialWidth="80" featureName="type"/>
      <ownedColumnMappings name="REQ_Subtype" label="" headerLabelExpression="Subtype" initialWidth="80" featureName="subtype"/>
      <ownedColumnMappings name="REQ_Status" label="" headerLabelExpression="Status" initialWidth="80" featureName="status"/>
      <ownedColumnMappings name="REQ_Statement" label="" headerLabelExpression="Statement" initialWidth="120" featureName="statement"/>
      <ownedColumnMappings name="REQ_Version" label="" headerLabelExpression="Version" initialWidth="80" canEdit="false" featureName="version"/>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_1:CrossTableDescription" name="Requirements Traceability Matrix" titleExpression="aql:self.name + ' Requirements Traceability Matrix'" domainClass="requirement::Repository">
      <ownedLineMappings name="Repository" domainClass="requirement::Repository" semanticCandidatesExpression="var:self" headerLabelExpression="feature:name">
        <ownedSubLines name="Category" reusedSubLines="//@ownedViewpoints[name='Requirements']/@ownedRepresentations[name='Requirements%20Traceability%20Matrix']/@ownedLineMappings[name='Repository']/@ownedSubLines[name='Category']" reusedInMappings="//@ownedViewpoints[name='Requirements']/@ownedRepresentations[name='Requirements%20Traceability%20Matrix']/@ownedLineMappings[name='Repository']/@ownedSubLines[name='Category']" domainClass="requirement::Category" semanticCandidatesExpression="feature:eContents" headerLabelExpression="aql:self.id + ' - ' + self.name">
          <ownedSubLines name="Requirement" domainClass="requirement::Requirement" semanticCandidatesExpression="feature:requirements" headerLabelExpression="aql:self.id + ' - ' + self.name"/>
        </ownedSubLines>
      </ownedLineMappings>
      <ownedColumnMappings name="Referenced Object" domainClass="EObject" semanticCandidatesExpression="aql:self.eAllContents(requirement::Requirement).referencedObject->select(o|o.eResource()&lt;>null)"/>
      <intersection name="Cross" lineMapping="//@ownedViewpoints[name='Requirements']/@ownedRepresentations[name='Requirements%20Traceability%20Matrix']/@ownedLineMappings[name='Repository']/@ownedSubLines[name='Category']/@ownedSubLines[name='Requirement']" columnMapping="//@ownedViewpoints[name='Requirements']/@ownedRepresentations[name='Requirements%20Traceability%20Matrix']/@ownedColumnMappings.0" labelExpression="X" columnFinderExpression="feature:referencedObject">
        <directEdit>
          <variables name="table" documentation="The current DTable."/>
          <variables name="line" documentation="The DLine of the current DCell."/>
          <variables name="element" documentation="The currently edited element."/>
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column (only available for Intersection Mapping)."/>
          <variables name="root" documentation="The semantic element of the table."/>
          <firstModelOperation xsi:type="tool:If" conditionExpression="aql:arg0=''">
            <subModelOperations xsi:type="tool:Unset" featureName="referencedObject" elementExpression="var:columnSemantic"/>
          </firstModelOperation>
          <mask mask="{0}"/>
        </directEdit>
      </intersection>
    </ownedRepresentations>
    <ownedRepresentationExtensions xsi:type="description_2:DiagramExtensionDescription" name="EObjectWithRequirement" viewpointURI=".*" representationName=".*">
      <layers name="EObjectWithRequirement" activeByDefault="true" optional="false">
        <decorationDescriptionsSet>
          <decorationDescriptions xsi:type="description:GenericDecorationDescription" name="EObjectWithRequirement" position="SOUTH_EAST" distributionDirection="HORIZONTAL" preconditionExpression="service:view.shouldDecorateForLinkedRequirement()" imageExpression="service:getImagePathForLinkedRequirementDecorator()"/>
        </decorationDescriptionsSet>
      </layers>
    </ownedRepresentationExtensions>
    <ownedJavaExtensions qualifiedClassName="org.obeonetwork.dsl.requirement.design.services.RequirementsServices"/>
    <ownedJavaExtensions qualifiedClassName="org.eclipse.sirius.common.tools.api.interpreter.StandardServices"/>
    <ownedJavaExtensions qualifiedClassName="org.obeonetwork.dsl.environment.design.ui.VersionService"/>
  </ownedViewpoints>
  <userColorsPalettes>
    <entries xsi:type="description:UserFixedColor" red="229" green="241" blue="251" name="light_light_blue"/>
  </userColorsPalettes>
  <extensions xsi:type="properties:ViewExtensionDescription" name="Properties">
    <metamodels href="http://www.obeonetwork.org/dsl/requirement/1.0#/"/>
    <categories name="Default Category">
      <pages name="Requirement Page {tabOrder=100}" labelExpression="Requirement" domainClass="requirement::Requirement" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.0/@groups.0"/>
      <pages name="Advanced Page {tabOrder=200}" labelExpression="Advanced" domainClass="requirement::Requirement" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.0/@groups.1"/>
      <pages name="Category Page {tabOrder=100}" labelExpression="Category" domainClass="requirement::Category" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.0/@groups.2"/>
      <pages name="Repository Page {tabOrder=100}" labelExpression="Repository" domainClass="requirement::Repository" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.0/@groups.3"/>
      <groups name="Requirement Group" labelExpression="Properties" domainClass="requirement::Requirement" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:SelectDescription" name="requirement::Requirement type" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('type')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('type'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('type').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('type').eType.getEEnumLiteralByLiteral(self.type.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('type').eType.eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:SetValue" featureName="type" valueExpression="aql:newValue.instance"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="requirement::Requirement subtype" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('subtype')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('subtype'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('subtype').changeable" valueExpression="aql:self.subtype">
          <initialOperation>
            <firstModelOperations xsi:type="tool:SetValue" featureName="subtype" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="requirement::Requirement id" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('id')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('id'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('id').changeable" valueExpression="aql:self.id">
          <initialOperation>
            <firstModelOperations xsi:type="tool:SetValue" featureName="id" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="requirement::Requirement name" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('name')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('name'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="aql:self.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:LabelDescription" name="requirement::Requirement version" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('version')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('version'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('version').changeable" valueExpression="aql:self.version">
          <style backgroundColor="//@userColorsPalettes[name=null]/@entries[name='light_light_blue']"/>
          <actions labelExpression="aql:'+1'">
            <initialOperation>
              <firstModelOperations xsi:type="tool:SetValue" featureName="version" valueExpression="aql:self.incrementVersion()"/>
            </initialOperation>
          </actions>
        </controls>
        <controls xsi:type="properties:TextDescription" name="requirement::Requirement status" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('status')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('status'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('status').changeable" valueExpression="aql:self.status">
          <initialOperation>
            <firstModelOperations xsi:type="tool:SetValue" featureName="status" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextAreaDescription" name="requirement::Requirement statement" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('statement')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('statement'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('statement').changeable" valueExpression="aql:self.statement">
          <initialOperation>
            <firstModelOperations xsi:type="tool:SetValue" featureName="statement" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="requirement::Requirement modifiedOn" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('modifiedOn')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('modifiedOn'))" isEnabledExpression="aql:false" valueExpression="aql:self.modifiedOn">
          <initialOperation>
            <firstModelOperations xsi:type="tool:SetValue" featureName="modifiedOn" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="requirement::Requirement createdOn" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('createdOn')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('createdOn'))" isEnabledExpression="aql:false" valueExpression="aql:self.createdOn">
          <initialOperation>
            <firstModelOperations xsi:type="tool:SetValue" featureName="createdOn" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
      </groups>
      <groups name="Advanced Group" labelExpression="Properties" domainClass="requirement::Requirement" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:TextAreaDescription" name="requirement::Requirement rationale" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('rationale')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('rationale'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('rationale').changeable" valueExpression="aql:self.rationale">
          <initialOperation>
            <firstModelOperations xsi:type="tool:SetValue" featureName="rationale" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextAreaDescription" name="requirement::Requirement acceptanceCriteria" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('acceptanceCriteria')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('acceptanceCriteria'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('acceptanceCriteria').changeable" valueExpression="aql:self.acceptanceCriteria">
          <initialOperation>
            <firstModelOperations xsi:type="tool:SetValue" featureName="acceptanceCriteria" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-ext-widgets-reference:ExtReferenceDescription" name="requirement::Requirement referencedObject" isEnabledExpression="aql:false" referenceNameExpression="aql:'referencedObject'"/>
      </groups>
      <groups name="Category Group" labelExpression="Properties" domainClass="requirement::Category" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:TextDescription" name="requirement::Category id" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('id')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('id'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('id').changeable" valueExpression="aql:self.id">
          <initialOperation>
            <firstModelOperations xsi:type="tool:SetValue" featureName="id" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="requirement::Category name" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('name')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('name'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="aql:self.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="requirement::Category requirements" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('requirements')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('requirements'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('requirements').changeable">
          <customExpressions name="referenceNameExpression" customExpression="aql:'requirements'"/>
          <customOperations name="addButtonOperation">
            <initialOperation>
              <firstModelOperations xsi:type="tool:CreateInstance" typeName="requirement::Requirement" referenceName="requirements" variableName="requirement">
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Create Category requirement Dialog">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation>
                      <firstModelOperations xsi:type="tool:RemoveElement"/>
                    </initialOperation>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation/>
                  </buttons>
                  <page name="Create Category requirement Page" extends="//@extensions.0/@categories.0/@pages.0"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </customOperations>
          <customOperations name="onDoubleClickOperation">
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:selection->first()">
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Edit Category requirement Dialog">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation/>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation/>
                  </buttons>
                  <page name="Edit Category requirement Page" extends="//@extensions.0/@categories.0/@pages.0"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </customOperations>
        </controls>
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="requirement::Category subCategories" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('subCategories')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('subCategories'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('subCategories').changeable">
          <customExpressions name="referenceNameExpression" customExpression="aql:'subCategories'"/>
          <customOperations name="addButtonOperation">
            <initialOperation>
              <firstModelOperations xsi:type="tool:CreateInstance" typeName="requirement::Category" referenceName="subCategories" variableName="category">
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Create Category subCategory Dialog">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation>
                      <firstModelOperations xsi:type="tool:RemoveElement"/>
                    </initialOperation>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation/>
                  </buttons>
                  <page name="Create Category subCategory Page" extends="//@extensions.0/@categories.0/@pages.2"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </customOperations>
          <customOperations name="onDoubleClickOperation">
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:selection->first()">
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Edit Category subCategory Dialog">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation/>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation/>
                  </buttons>
                  <page name="Edit Category subCategory Page" extends="//@extensions.0/@categories.0/@pages.2"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </customOperations>
        </controls>
      </groups>
      <groups name="Repository Group" labelExpression="Properties" domainClass="requirement::Repository" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:TextDescription" name="requirement::Requirement name" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('name')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('name'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="aql:self.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="requirement::Category mainCategories" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('mainCategories')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('mainCategories'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('mainCategories').changeable">
          <customExpressions name="referenceNameExpression" customExpression="aql:'mainCategories'"/>
          <customOperations name="addButtonOperation">
            <initialOperation>
              <firstModelOperations xsi:type="tool:CreateInstance" typeName="requirement::Category" referenceName="mainCategories" variableName="category">
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Create Repository mainCategory Dialog">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation>
                      <firstModelOperations xsi:type="tool:RemoveElement"/>
                    </initialOperation>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation/>
                  </buttons>
                  <page name="Create Repository mainCategory Page" extends="//@extensions.0/@categories.0/@pages.2"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </customOperations>
          <customOperations name="onDoubleClickOperation">
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:selection->first()">
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Edit Repository mainCategory Dialog">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation/>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation/>
                  </buttons>
                  <page name="Edit Repository mainCategory Page" extends="//@extensions.0/@categories.0/@pages.2"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </customOperations>
        </controls>
        <controls xsi:type="properties-ext-widgets-reference:ExtReferenceDescription" name="requirement::Repository referencedObject" isEnabledExpression="aql:false" referenceNameExpression="aql:'referencedObject'"/>
      </groups>
    </categories>
  </extensions>
</description:Group>
