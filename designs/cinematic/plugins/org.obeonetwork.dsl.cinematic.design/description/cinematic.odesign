<?xml version="1.0" encoding="UTF-8"?>
<description:Group xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:description="http://www.eclipse.org/sirius/description/1.1.0" xmlns:description_1="http://www.eclipse.org/sirius/diagram/description/1.1.0" xmlns:description_2="http://www.eclipse.org/sirius/tree/description/1.0.0" xmlns:properties="http://www.eclipse.org/sirius/properties/1.0.0" xmlns:style="http://www.eclipse.org/sirius/diagram/description/style/1.1.0" xmlns:tool="http://www.eclipse.org/sirius/diagram/description/tool/1.1.0" xmlns:tool_1="http://www.eclipse.org/sirius/description/tool/1.1.0" documentation="Copyright (c) 2008, 2024 Obeo.&#xD;&#xA;All rights reserved. This program and the accompanying materials&#xD;&#xA;are made available under the terms of the Eclipse Public License v2.0&#xD;&#xA;which accompanies this distribution, and is available at&#xD;&#xA;https://www.eclipse.org/legal/epl-2.0/&#xD;&#xA;&#xD;&#xA;Contributors:&#xD;&#xA;   Obeo - initial API and implementation" name="Cinematic" version="12.0.0.2017041100">
  <ownedViewpoints endUserDocumentation="The &lt;b>Cinematic Views&lt;/b> viewpoint provides three representations : &#xD;&#xA;&lt;ul>&#xD;&#xA;&lt;li>&lt;b>UI Structure&lt;/b> : a tree allowing to structure the Cinematic model contents,&lt;/li>&#xD;&#xA;&lt;li>&lt;b>Package Diagram&lt;/b> : a diagram allowing to represent and edit a package strucure,&lt;/li>&#xD;&#xA;&lt;li>&lt;b>Flow Diagram&lt;/b> : a flow diagram allowing to represent and edit a flow.&lt;/li>&#xD;&#xA;&lt;/ul>&#xA;" name="Cinematic Views">
    <ownedRepresentations xsi:type="description_1:DiagramDescription" name="Reused Description" domainClass="cinematic.CinematicRoot" preconditionExpression="false">
      <metamodel href="platform:/plugin/org.obeonetwork.dsl.cinematic/model/cinematic.ecore#/"/>
      <metamodel href="platform:/plugin/org.obeonetwork.dsl.cinematic/model/cinematic.ecore#//toolkits"/>
      <metamodel href="platform:/plugin/org.obeonetwork.dsl.cinematic/model/cinematic.ecore#//view"/>
      <metamodel href="platform:/plugin/org.obeonetwork.dsl.cinematic/model/cinematic.ecore#//flow"/>
      <toolSection name="Usability">
        <ownedTools xsi:type="tool:DirectEditLabel" name="EDT_Common">
          <mask mask="{0}"/>
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="service:editCinematicLabel(arg0)"/>
          </initialOperation>
        </ownedTools>
        <ownedTools xsi:type="tool_1:OperationAction" name="MNU_AssociateToolkit" label="Associate toolkit" icon="/org.obeonetwork.dsl.cinematic.edit/icons/full/obj16/Toolkit.gif">
          <view name="views">
            <subVariables xsi:type="tool_1:AcceleoVariable" name="cinematicRoot" computationExpression="service:getCinematicRoot()"/>
            <subVariables xsi:type="tool_1:SelectModelElementVariable" name="selectedToolkit" candidatesExpression="service:cinematicRoot.getCinematicProvidedToolkits()" message="Select a toolkit to associate"/>
          </view>
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="service:cinematicRoot.associateToolkit(selectedToolkit)"/>
          </initialOperation>
        </ownedTools>
      </toolSection>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_1:DiagramDescription" dropDescriptions="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@toolSections.2/@ownedTools[name='DND_FlowDiagram_content'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@additionalLayers[name='Flow%20Events']/@toolSections.1/@ownedTools[name='DND_FLD_FlowEvents'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@additionalLayers[name='View%20Containers']/@toolSections.1/@ownedTools[name='DND_FLD_ViewContainer']" name="Flow Diagram" titleExpression="aql:self.name + ' Flow Diagram'" domainClass="flow::Flow" enablePopupBars="true">
      <metamodel href="platform:/plugin/org.obeonetwork.dsl.cinematic/model/cinematic.ecore#//flow"/>
      <metamodel href="platform:/plugin/org.obeonetwork.dsl.cinematic/model/cinematic.ecore#/"/>
      <metamodel href="platform:/plugin/org.obeonetwork.dsl.cinematic/model/cinematic.ecore#//view"/>
      <metamodel href="platform:/plugin/org.obeonetwork.dsl.cinematic/model/cinematic.ecore#//toolkits"/>
      <layout xsi:type="description_1:CompositeLayout" padding="15" direction="LeftToRight"/>
      <diagramInitialisation>
        <firstModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclAsType(flow::Flow).states->filter(flow::InitialState)->isEmpty()">
          <subModelOperations xsi:type="tool_1:CreateInstance" typeName="flow.InitialState" referenceName="states">
            <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="Initial"/>
          </subModelOperations>
        </firstModelOperations>
      </diagramInitialisation>
      <defaultLayer name="Default">
        <nodeMappings name="FLD_InitialState" deletionDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@toolSections.2/@ownedTools[name='FLD_DEL_Flow_contents']" semanticCandidatesExpression="feature:states" domainClass="flow::InitialState">
          <style xsi:type="style:WorkspaceImageDescription" labelSize="10" showIcon="false" labelExpression="" labelColor="//@userColorsPalettes[name='DomainColors']/@entries[name='ISDLabelAndEdge']" sizeComputationExpression="-1" resizeKind="NSEW" arcWidth="1" arcHeight="1" workspacePath="/org.obeonetwork.dsl.cinematic.design/icons/viewpoint/initial_state.svg">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelFormat>bold</labelFormat>
          </style>
        </nodeMappings>
        <nodeMappings name="FLD_FinalState" deletionDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@toolSections.2/@ownedTools[name='FLD_DEL_Flow_contents']" semanticCandidatesExpression="feature:states" domainClass="flow::FinalState">
          <style xsi:type="style:WorkspaceImageDescription" labelSize="10" showIcon="false" labelExpression="" labelColor="//@userColorsPalettes[name='DomainColors']/@entries[name='ISDLabelAndEdge']" sizeComputationExpression="-1" resizeKind="NSEW" arcWidth="1" arcHeight="1" workspacePath="/org.obeonetwork.dsl.cinematic.design/icons/viewpoint/final_state.svg">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelFormat>bold</labelFormat>
          </style>
        </nodeMappings>
        <nodeMappings name="FLD_AbortState" deletionDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@toolSections.2/@ownedTools[name='FLD_DEL_Flow_contents']" semanticCandidatesExpression="feature:states" domainClass="flow::AbortState">
          <style xsi:type="style:WorkspaceImageDescription" labelSize="10" showIcon="false" labelExpression="" labelColor="//@userColorsPalettes[name='DomainColors']/@entries[name='ISDLabelAndEdge']" sizeComputationExpression="-1" resizeKind="NSEW" arcWidth="1" arcHeight="1" workspacePath="/org.obeonetwork.dsl.cinematic.design/icons/viewpoint/abort_state.svg">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelFormat>bold</labelFormat>
          </style>
        </nodeMappings>
        <nodeMappings name="FLD_ViewState" detailDescriptions="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@toolSections.2/@ownedTools[name='FLD_ViewState_ViewContainerMockup_Create']" navigationDescriptions="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@toolSections.2/@ownedTools[name='FLD_ViewState_ViewContainerMockup_Navigate']" deletionDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@toolSections.2/@ownedTools[name='FLD_DEL_Flow_contents']" labelDirectEdit="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Reused%20Description']/@toolSection/@ownedTools[name='EDT_Common']" semanticCandidatesExpression="feature:states" doubleClickDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@toolSections.2/@ownedTools[name='FLD_ViewState_DoubleClick_EditViewState']" domainClass="flow::ViewState">
          <borderedNodeMappings name="FLD_FakeNodeForViewContainerBinding" preconditionExpression="false" semanticCandidatesExpression="null" synchronizationLock="true" documentation="This fake bordered node is used to be able to specify a creation tool on it." domainClass="flow.ViewState">
            <style xsi:type="style:SquareDescription" labelColor="//@userColorsPalettes[name='DomainColors']/@entries[name='ISDLabelAndEdge']" sizeComputationExpression="4" resizeKind="NSEW">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            </style>
          </borderedNodeMappings>
          <style xsi:type="style:WorkspaceImageDescription" labelSize="10" labelColor="//@userColorsPalettes[name='DomainColors']/@entries[name='ISDLabelAndEdge']" sizeComputationExpression="15" resizeKind="NSEW" arcWidth="1" arcHeight="1" workspacePath="/org.obeonetwork.dsl.cinematic.design/icons/viewpoint/state.svg">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelFormat>bold</labelFormat>
          </style>
        </nodeMappings>
        <nodeMappings name="FLD_ActionState" deletionDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@toolSections.2/@ownedTools[name='FLD_DEL_Flow_contents']" labelDirectEdit="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Reused%20Description']/@toolSection/@ownedTools[name='EDT_Common']" semanticCandidatesExpression="feature:states" domainClass="flow::ActionState">
          <style xsi:type="style:WorkspaceImageDescription" labelSize="10" showIcon="false" labelColor="//@userColorsPalettes[name='DomainColors']/@entries[name='ISDLabelAndEdge']" sizeComputationExpression="5" resizeKind="NSEW" arcWidth="1" arcHeight="1" workspacePath="/org.obeonetwork.dsl.cinematic.design/icons/viewpoint/action.svg">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelFormat>bold</labelFormat>
          </style>
        </nodeMappings>
        <nodeMappings name="FLD_AsyncEventState" deletionDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@toolSections.2/@ownedTools[name='FLD_DEL_Flow_contents']" labelDirectEdit="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Reused%20Description']/@toolSection/@ownedTools[name='EDT_Common']" semanticCandidatesExpression="feature:states" domainClass="flow::AsyncEventState">
          <style xsi:type="style:WorkspaceImageDescription" labelSize="10" labelColor="//@userColorsPalettes[name='DomainColors']/@entries[name='ISDLabelAndEdge']" sizeComputationExpression="-1" labelPosition="node" resizeKind="NSEW" arcWidth="1" arcHeight="1" workspacePath="/org.obeonetwork.dsl.cinematic.design/icons/viewpoint/state.svg">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelFormat>bold</labelFormat>
          </style>
        </nodeMappings>
        <nodeMappings name="FLD_SubflowState" detailDescriptions="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@toolSections.2/@ownedTools[name='FLD_SubflowState_FlowDiagram_Create']" navigationDescriptions="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@toolSections.2/@ownedTools[name='FLD_SubflowState_FlowDiagram_Navigate']" deletionDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@toolSections.2/@ownedTools[name='FLD_DEL_Flow_contents']" labelDirectEdit="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Reused%20Description']/@toolSection/@ownedTools[name='EDT_Common']" semanticCandidatesExpression="feature:states" doubleClickDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@toolSections.2/@ownedTools[name='FLD_SubflowState_FlowDiagram_DoubleClick_Navigate']" domainClass="flow::SubflowState">
          <style xsi:type="style:WorkspaceImageDescription" labelSize="10" labelColor="//@userColorsPalettes[name='DomainColors']/@entries[name='ISDLabelAndEdge']" sizeComputationExpression="-1" labelPosition="node" resizeKind="NSEW" arcWidth="1" arcHeight="1" workspacePath="/org.obeonetwork.dsl.cinematic.design/icons/viewpoint/state.svg">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelFormat>bold</labelFormat>
          </style>
        </nodeMappings>
        <nodeMappings name="FLD_DecisionState" deletionDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@toolSections.2/@ownedTools[name='FLD_DEL_Flow_contents']" semanticCandidatesExpression="feature:states" domainClass="flow::DecisionState">
          <style xsi:type="style:WorkspaceImageDescription" labelSize="10" showIcon="false" labelExpression="" labelColor="//@userColorsPalettes[name='DomainColors']/@entries[name='ISDLabelAndEdge']" sizeComputationExpression="-1" labelPosition="node" resizeKind="NSEW" arcWidth="1" arcHeight="1" workspacePath="/org.obeonetwork.dsl.cinematic.design/icons/viewpoint/decision_state.svg">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelFormat>bold</labelFormat>
          </style>
        </nodeMappings>
        <edgeMappings name="FLD_Transition" deletionDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@toolSections.2/@ownedTools[name='FLD_DEL_Flow_contents']" labelDirectEdit="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@toolSections.2/@ownedTools[name='DE_Transition']" semanticCandidatesExpression="feature:transitions" doubleClickDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@toolSections.2/@ownedTools[name='FLD_Transition_DoubleClick_EditEvents']" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_AbortState'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_ActionState'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_AsyncEventState'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_DecisionState'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_FinalState'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_InitialState'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_SubflowState'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_ViewState']" targetMapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_AbortState'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_ActionState'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_AsyncEventState'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_DecisionState'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_FinalState'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_InitialState'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_SubflowState'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_ViewState']" targetFinderExpression="feature:to" sourceFinderExpression="feature:from" targetExpression="var:self" domainClass="flow::Transition" useDomainElement="true" reconnections="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@toolSections.2/@ownedTools[name='REC_Transition_Target'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@toolSections.2/@ownedTools[name='REC_Transition_Source']">
          <style strokeColor="//@userColorsPalettes[name='DomainColors']/@entries[name='ISDLabelAndEdge']" lineStyle="dash">
            <beginLabelStyleDescription showIcon="false" labelExpression="service:getGuardLabel" labelColor="//@userColorsPalettes[name='DomainColors']/@entries[name='ISDLabelAndEdge']"/>
            <centerLabelStyleDescription labelExpression="service:getCinematicLabel" labelColor="//@userColorsPalettes[name='DomainColors']/@entries[name='ISDLabelAndEdge']" iconPath="/org.obeonetwork.dsl.cinematic.design/icons/viewpoint/event.gif"/>
          </style>
          <conditionnalStyles predicateExpression="aql:self.isFlowTransition()">
            <style strokeColor="//@userColorsPalettes[name='DomainColors']/@entries[name='ISDLabelAndEdge']" sizeComputationExpression="2">
              <beginLabelStyleDescription showIcon="false" labelExpression="service:getGuardLabel" labelColor="//@userColorsPalettes[name='DomainColors']/@entries[name='ISDLabelAndEdge']"/>
              <centerLabelStyleDescription labelExpression="service:getCinematicLabel" labelColor="//@userColorsPalettes[name='DomainColors']/@entries[name='ISDLabelAndEdge']" iconPath="/org.obeonetwork.dsl.cinematic.design/icons/viewpoint/event.gif"/>
            </style>
          </conditionnalStyles>
        </edgeMappings>
        <toolSections name="States">
          <ownedTools xsi:type="tool:EdgeCreationDescription" name="CRE_Transition" label="Transition" edgeMappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@edgeMappings[name='FLD_Transition']">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source.eContainer()">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="flow.Transition" referenceName="transitions">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="from" valueExpression="var:source"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="to" valueExpression="var:target"/>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source.oclIsKindOf(flow::ViewState)">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.openEventSelectionDialog()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" name="CRE_ViewState" label="View" nodeMappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_ViewState']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="flow.ViewState" referenceName="states">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'View' + self.eContainer(flow::Flow).states->filter(flow::ViewState)->size()">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.openViewContainerSelectionDialog()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" name="CRE_ActionState" label="Action" nodeMappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_ActionState']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="flow.ActionState" referenceName="states">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Action' + self.eContainer(flow::Flow).states->filter(flow::ActionState)->size()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" name="CRE_AsyncEventState" label="AsyncEvent" nodeMappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_AsyncEventState']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="flow.AsyncEventState" referenceName="states">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'AsyncEvent' + self.eContainer(flow::Flow).states->filter(flow::AsyncEventState)->size()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" name="CRE_ExistingFlowSubflowState" label="Existing flow" nodeMappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_SubflowState']">
            <variable name="container">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="allFlows" computationExpression="aql:container.getAllRootsForCinematic().eAllContents(flow::Flow)"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="allCandidates" computationExpression="aql:(allFlows + allFlows.eContainer()->filter(cinematic::AbstractPackage))->asOrderedSet()->asSequence()"/>
              <subVariables xsi:type="tool_1:SelectModelElementVariable" name="selectedFlow" candidatesExpression="aql:allCandidates" tree="true" rootExpression="aql:allCandidates->select(e | e.eContainer() =null or allCandidates->excludes(e.eContainer()))" childrenExpression="feature:eContents" message="Select an existing Flow"/>
            </variable>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:selectedFlow &lt;> null">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="flow.SubflowState" referenceName="states">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="subflow" valueExpression="var:selectedFlow"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" name="CRE_NewFlowSubflowState" label="New flow" nodeMappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_SubflowState']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainer()">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="flow.Flow" referenceName="flows" variableName="newFlow">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="['Flow' + eContainer(cinematic::AbstractPackage).flows->size()/]"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="flow.SubflowState" referenceName="states">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="subflow" valueExpression="var:newFlow"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="Ports">
          <ownedTools xsi:type="tool:NodeCreationDescription" name="CRE_CreateInitialState" label="Initial" nodeMappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_InitialState']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="flow.InitialState" referenceName="states">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="Initial"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" name="CRE_CreateFinalState" label="Final" nodeMappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_FinalState']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="flow.FinalState" referenceName="states">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="Final"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" name="CRE_CreateAbortState" label="Abort" nodeMappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_AbortState']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="flow.AbortState" referenceName="states">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="Abort"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" name="CRE_DecisionState" label="Decision" nodeMappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_DecisionState']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="flow.DecisionState" referenceName="states">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="Decision"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="Usability">
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="REC_Transition_Target">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:element">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="to" valueExpression="var:target"/>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="REC_Transition_Source" reconnectionKind="RECONNECT_SOURCE">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:element">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="from" valueExpression="var:target"/>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DirectEditLabel" name="DE_Transition" inputLabelExpression="aql:self.guard">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DoubleClickDescription" name="FLD_Transition_DoubleClick_EditEvents" mappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@edgeMappings[name='FLD_Transition']">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.target.openEventSelectionDialog()"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DoubleClickDescription" name="FLD_ViewState_DoubleClick_EditViewState" mappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_ViewState']">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.openViewContainerSelectionDialog()"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="DND_FlowDiagram_content" precondition="aql:not newViewContainer.eContainerOrSelf(diagram::DSemanticDiagram).synchronized and element.eContainer()=newContainer and Sequence{flow::InitialState, flow::FinalState, flow::AbortState, flow::ViewState, flow::ActionState, flow::AsyncEventState, flow::SubflowState, flow::DecisionState}->intersection(element.eClass().eAllSuperTypes->including(element.eClass()))->notEmpty()" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:element">
                <subModelOperations xsi:type="tool_1:Switch">
                  <cases conditionExpression="aql:element.oclIsKindOf(flow::InitialState)">
                    <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_InitialState']" containerViewExpression="var:newContainerView"/>
                  </cases>
                  <cases conditionExpression="aql:element.oclIsKindOf(flow::FinalState)">
                    <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_FinalState']" containerViewExpression="var:newContainerView"/>
                  </cases>
                  <cases conditionExpression="aql:element.oclIsKindOf(flow::AbortState)">
                    <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_AbortState']" containerViewExpression="var:newContainerView"/>
                  </cases>
                  <cases conditionExpression="aql:element.oclIsKindOf(flow::ViewState)">
                    <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_ViewState']" containerViewExpression="var:newContainerView"/>
                  </cases>
                  <cases conditionExpression="aql:element.oclIsKindOf(flow::ActionState)">
                    <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_ActionState']" containerViewExpression="var:newContainerView"/>
                  </cases>
                  <cases conditionExpression="aql:element.oclIsKindOf(flow::AsyncEventState)">
                    <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_AsyncEventState']" containerViewExpression="var:newContainerView"/>
                  </cases>
                  <cases conditionExpression="aql:element.oclIsKindOf(flow::SubflowState)">
                    <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_SubflowState']" containerViewExpression="var:newContainerView"/>
                  </cases>
                  <cases conditionExpression="aql:element.oclIsKindOf(flow::DecisionState)">
                    <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_DecisionState']" containerViewExpression="var:newContainerView"/>
                  </cases>
                  <default>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self"/>
                  </default>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="FLD_DEL_Flow_contents" precondition="aql:containerView.eContainerOrSelf(diagram::DSemanticDiagram).synchronized">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:element">
                <subModelOperations xsi:type="tool_1:RemoveElement"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="FLD_SubflowState_FlowDiagram_Create" label="Flow Diagram" precondition="service:isSubFlowNotNull" browseExpression="feature:subflow" diagramDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self"/>
            </initialOperation>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramNavigationDescription" name="FLD_SubflowState_FlowDiagram_Navigate" label="Subflow Diagram" precondition="service:isSubFlowNotNull" browseExpression="feature:subflow" navigationNameExpression="aql:diagramName" diagramDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']">
            <containerViewVariable name="containerView"/>
            <containerVariable name="container"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DoubleClickDescription" name="FLD_SubflowState_FlowDiagram_DoubleClick_Navigate" mappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_SubflowState']">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.oclAsType(flow::SubflowState).subflow">
                <subModelOperations xsi:type="tool:Navigation" createIfNotExistent="true" diagramDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="FLD_ViewState_ViewContainerMockup_Create" label="View Container Mockup" browseExpression="aql:self.viewContainers->first()" diagramDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramNavigationDescription" name="FLD_ViewState_ViewContainerMockup_Navigate" precondition="aql:self.viewContainers->notEmpty()" browseExpression="aql:self.viewContainers" navigationNameExpression="aql:diagramName" diagramDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']">
            <containerViewVariable name="containerView"/>
            <containerVariable name="container"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="FLD_ViewContainer_ViewContainerMockup_Create" label="View Container Mockup" diagramDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramNavigationDescription" name="FLD_ViewContainer_ViewContainerMockup_Navigate" navigationNameExpression="aql:diagramName" diagramDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']">
            <containerViewVariable name="containerView"/>
            <containerVariable name="container"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DoubleClickDescription" name="FLD_ViewContainer_ViewContainerMockup_DoubleClick_Navigate" mappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@additionalLayers[name='View%20Containers']/@containerMappings[name='FLD_ViewContainer'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@additionalLayers[name='View%20Containers']/@containerMappings[name='FLD_ViewContainer']/@subNodeMappings[name='FLD_ViewContainer']">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:Navigation" createIfNotExistent="true" diagramDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="FLD_DEL_Synchronized" precondition="aql:containerView.eContainerOrSelf(diagram::DSemanticDiagram).synchronized">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:element">
                <subModelOperations xsi:type="tool_1:RemoveElement"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
      </defaultLayer>
      <additionalLayers name="Flow Events" activeByDefault="true">
        <containerMappings name="FLD_FlowEvents" deletionDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@additionalLayers[name='Flow%20Events']/@toolSections.0/@ownedTools[name='DEL_PreventFlowDeletion']" semanticCandidatesExpression="var:self" domainClass="flow.Flow" childrenPresentation="List">
          <subNodeMappings name="FLD_FlowEvent" deletionDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@toolSections.2/@ownedTools[name='FLD_DEL_Synchronized']" labelDirectEdit="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@additionalLayers[name='Flow%20Events']/@toolSections.1/@ownedTools[name='DE_FlowEvent']" semanticCandidatesExpression="feature:events" synchronizationLock="true" domainClass="flow.FlowEvent">
            <style xsi:type="style:SquareDescription" labelExpression="aql:self.getCinematicLabel()+' ('+self.binds -> size()+')'" labelColor="//@userColorsPalettes[name='DomainColors']/@entries[name='ISDLabelAndEdge']" labelAlignment="LEFT" resizeKind="NSEW">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            </style>
          </subNodeMappings>
          <style xsi:type="style:FlatContainerStyleDescription" arcWidth="5" arcHeight="5" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='DomainColors']/@entries[name='ISDBorder']" borderLineStyle="dash" labelSize="10" labelExpression="Flow Events" labelColor="//@userColorsPalettes[name='DomainColors']/@entries[name='ISDLabelAndEdge']" roundedCorner="true">
            <labelFormat>bold</labelFormat>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
          </style>
        </containerMappings>
        <toolSections name="Events">
          <ownedTools xsi:type="tool:NodeCreationDescription" name="CRE_FlowEvent" label="Flow Event" nodeMappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@additionalLayers[name='Flow%20Events']/@containerMappings[name='FLD_FlowEvents']/@subNodeMappings[name='FLD_FlowEvent']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="flow.FlowEvent" referenceName="events">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'event' + self.eContainer(flow::Flow).events->size()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="DEL_PreventFlowDeletion" precondition="aql:false">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self"/>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="Usability">
          <ownedTools xsi:type="tool:DirectEditLabel" name="DE_FlowEvent" inputLabelExpression="aql:self.name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="var:arg0"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="DND_FLD_FlowEvents" precondition="aql:let diagram = newViewContainer.eContainerOrSelf(diagram::DSemanticDiagram) in not diagram.synchronized and element = diagram.target endlet" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:element">
                <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@additionalLayers[name='Flow%20Events']/@containerMappings[name='FLD_FlowEvents']" containerViewExpression="var:newContainerView"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
      </additionalLayers>
      <additionalLayers name="View Containers" activeByDefault="true">
        <edgeMappings name="FLD_ViewState_To_ViewContainer" deletionDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@additionalLayers[name='View%20Containers']/@toolSections.1/@ownedTools[name='DEL_DissociateViewStateAndViewContainer']" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_ViewState']" targetMapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@additionalLayers[name='View%20Containers']/@containerMappings[name='FLD_ViewContainer']" targetFinderExpression="feature:viewContainers" targetExpression="var:self" reconnections="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@additionalLayers[name='View%20Containers']/@toolSections.1/@ownedTools[name='REC_ViewState_To_ViewContainer_Target'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@additionalLayers[name='View%20Containers']/@toolSections.1/@ownedTools[name='REC_ViewState_To_ViewContainer_Source']">
          <style strokeColor="//@userColorsPalettes[name='DomainColors']/@entries[name='ISDLabelAndEdge']" lineStyle="dot" targetArrow="NoDecoration" sizeComputationExpression="aql:self.eContents()->size()">
            <centerLabelStyleDescription showIcon="false" labelColor="//@userColorsPalettes[name='DomainColors']/@entries[name='ISDLabelAndEdge']"/>
          </style>
        </edgeMappings>
        <containerMappings name="FLD_ViewContainer" detailDescriptions="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@additionalLayers[name='View%20Containers']/@toolSections.1/@ownedTools[name='CRE_UI_Structure'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@toolSections.2/@ownedTools[name='FLD_ViewContainer_ViewContainerMockup_Create']" navigationDescriptions="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@additionalLayers[name='View%20Containers']/@toolSections.1/@ownedTools[name='UI%20Structure'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@toolSections.2/@ownedTools[name='FLD_ViewContainer_ViewContainerMockup_Navigate']" deletionDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@additionalLayers[name='View%20Containers']/@toolSections.1/@ownedTools[name='DEL_FLD_ViewContainer']" labelDirectEdit="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Reused%20Description']/@toolSection/@ownedTools[name='EDT_Common']" semanticCandidatesExpression="service:getStatesViewContainers" doubleClickDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@toolSections.2/@ownedTools[name='FLD_ViewContainer_ViewContainerMockup_DoubleClick_Navigate']" domainClass="view::ViewContainer" childrenPresentation="List">
          <subNodeMappings name="FLD_ViewContainer" deletionDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@toolSections.2/@ownedTools[name='FLD_DEL_Synchronized']" semanticCandidatesExpression="feature:ownedElements" doubleClickDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@toolSections.2/@ownedTools[name='FLD_ViewContainer_ViewContainerMockup_DoubleClick_Navigate']" synchronizationLock="true" domainClass="view.ViewContainer">
            <style xsi:type="style:SquareDescription" labelExpression="service:getCinematicLabel" labelColor="//@userColorsPalettes[name='DomainColors']/@entries[name='ISDLabelAndEdge']" labelAlignment="LEFT" resizeKind="NSEW">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            </style>
          </subNodeMappings>
          <subNodeMappings name="FLD_ViewElement" deletionDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@toolSections.2/@ownedTools[name='FLD_DEL_Synchronized']" semanticCandidatesExpression="feature:ownedElements" synchronizationLock="true" domainClass="view.ViewElement">
            <style xsi:type="style:SquareDescription" labelExpression="service:getCinematicLabel" labelColor="//@userColorsPalettes[name='DomainColors']/@entries[name='ISDLabelAndEdge']" labelAlignment="LEFT" resizeKind="NSEW">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            </style>
          </subNodeMappings>
          <subNodeMappings name="FLD_ViewContainerReference" deletionDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@toolSections.2/@ownedTools[name='FLD_DEL_Synchronized']" semanticCandidatesExpression="feature:ownedElements" semanticElements="feature:viewContainer" synchronizationLock="true" domainClass="view.ViewContainerReference">
            <style xsi:type="style:SquareDescription" labelExpression="service:getCinematicLabel" labelColor="//@userColorsPalettes[name='DomainColors']/@entries[name='ISDLabelAndEdge']" labelAlignment="LEFT" resizeKind="NSEW">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            </style>
          </subNodeMappings>
          <style xsi:type="style:FlatContainerStyleDescription" arcWidth="1" arcHeight="1" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='DomainColors']/@entries[name='ISDBorder']" labelSize="10" labelExpression="service:getCinematicLabel" labelColor="//@userColorsPalettes[name='DomainColors']/@entries[name='ISDLabelAndEdge']" backgroundColor="//@userColorsPalettes[name='DomainColors']/@entries[name='CinematicFillDark']" foregroundColor="//@userColorsPalettes[name='DomainColors']/@entries[name='CinematicFillDark']">
            <labelFormat>bold</labelFormat>
          </style>
        </containerMappings>
        <toolSections name="View Containers">
          <ownedTools xsi:type="tool:EdgeCreationDescription" name="CRE_ViewState_To_ViewContainer" label="Bind View State and View Container" precondition="aql:preSource.oclAsType(flow::ViewState).viewContainers->excludes(preTarget)" edgeMappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@additionalLayers[name='View%20Containers']/@edgeMappings[name='FLD_ViewState_To_ViewContainer']" iconPath="/org.obeonetwork.dsl.cinematic.design/icons/viewpoint/ViewStateToViewContainer.gif">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:source">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="viewContainers" valueExpression="var:target"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" name="CRE_ViewState_To_Existing_ViewContainer" label="Bind existing View Container" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_ViewState']/@borderedNodeMappings[name='FLD_FakeNodeForViewContainerBinding']">
            <variable name="container">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="allContainers" computationExpression="[container.getAllRootsForCinematic()->collect(eAllContents(cinematic::view::ViewContainer))/]"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="allCandidates" computationExpression="service:getViewContainersPossible(allContainers)"/>
              <subVariables xsi:type="tool_1:SelectModelElementVariable" name="selectedElement" candidatesExpression="var:allCandidates" tree="true" rootExpression="[allCandidates->select(eContainer().oclIsUndefined() or (not allCandidates->includes(eContainer())))/]" childrenExpression="feature:eContents" message="Select a view container to bind with the view state"/>
            </variable>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:selectedElement">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsTypeOf(view::ViewContainer)">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="viewContainers" valueExpression="var:selectedElement"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" name="CRE_ViewState_To_New_ViewContainer" label="Bind new View Container" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@nodeMappings[name='FLD_ViewState']/@borderedNodeMappings[name='FLD_FakeNodeForViewContainerBinding']">
            <variable name="container">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="viewContainerTypes" computationExpression="service:getWidgetsHavePropertyIsContainer"/>
              <subVariables xsi:type="tool_1:SelectModelElementVariable" name="selectedType" candidatesExpression="service:getToolkitsFromWidget(viewContainerTypes)" tree="true" rootExpression="aql:viewContainerTypes.eContainer(toolkits::Toolkit)->asOrderedSet()->asSequence()" childrenExpression="feature:widgets" message="Select the type of the new view container"/>
            </variable>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainer(cinematic::AbstractPackage)">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="view.ViewContainer" referenceName="viewContainers" variableName="newViewContainer">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="['ViewContainer' + eContainer(cinematic::AbstractPackage).viewContainers->size()/]"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="widget" valueExpression="service:getWidgetHavePropertyIsContainer(selectedType)"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="viewContainers" valueExpression="var:newViewContainer"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="Usability" reusedTools="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Reused%20Description']/@toolSection/@ownedTools[name='MNU_AssociateToolkit'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@defaultLayer/@toolSections.2/@ownedTools[name='FLD_DEL_Flow_contents']">
          <ownedTools xsi:type="tool:DeleteElementDescription" name="DEL_DissociateViewStateAndViewContainer" precondition="aql:containerView.eContainerOrSelf(diagram::DSemanticDiagram).synchronized">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.oclAsType(diagram::DEdge).sourceNode.oclAsType(diagram::DNodeList).target">
                <subModelOperations xsi:type="tool_1:Unset" featureName="viewContainers" elementExpression="aql:elementView.oclAsType(diagram::DEdge).targetNode.oclAsType(diagram::DNodeList).target"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="REC_ViewState_To_ViewContainer_Target">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:edgeView.oclAsType(diagram::DEdge).sourceNode.oclAsType(diagram::DNodeList).target">
                <subModelOperations xsi:type="tool_1:Unset" featureName="viewContainers" elementExpression="var:source"/>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclAsType(flow::ViewState).viewContainers->excludes(target)">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="viewContainers" valueExpression="var:target"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="REC_ViewState_To_ViewContainer_Source" reconnectionKind="RECONNECT_SOURCE">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:source">
                <subModelOperations xsi:type="tool_1:Unset" featureName="viewContainers" elementExpression="[edgeView.oclAsType(diagram::DEdge).targetNode.oclAsType(diagram::DNodeList).target/]"/>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:target">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclAsType(flow::ViewState).viewContainers->excludes(edgeView.oclAsType(diagram::DEdge).targetNode.oclAsType(diagram::DNodeList).target)">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="viewContainers" valueExpression="[edgeView.oclAsType(diagram::DEdge).targetNode.oclAsType(diagram::DNodeList).target/]"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="description_2:TreeCreationDescription" name="CRE_UI_Structure" label="UI Structure" browseExpression="aql:self.eContainer(cinematic::AbstractPackage)" treeDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='UI%20Structure']">
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="treeName"/>
          </ownedTools>
          <ownedTools xsi:type="description_2:TreeNavigationDescription" name="UI Structure" label="UI Structure" browseExpression="aql:self.eContainer(cinematic::AbstractPackage)" treeDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='UI%20Structure']">
            <containerViewVariable name="containerView"/>
            <containerVariable name="container"/>
            <representationNameVariable name="treeName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="DND_FLD_ViewContainer" precondition="aql:let diagram = newViewContainer.eContainerOrSelf(diagram::DSemanticDiagram) in not diagram.synchronized and diagram.target.oclAsType(flow::Flow).getStatesViewContainers()->includes(element) endlet" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:element">
                <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@additionalLayers[name='View%20Containers']/@containerMappings[name='FLD_ViewContainer']" containerViewExpression="var:newContainerView"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="DEL_FLD_ViewContainer" precondition="aql:containerView.eContainerOrSelf(diagram::DSemanticDiagram).synchronized">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:element">
                <subModelOperations xsi:type="tool_1:RemoveElement"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
      </additionalLayers>
      <backgroundColor xsi:type="description:ComputedColor" href="../../org.obeonetwork.dsl.environment.design/description/environment.odesign#//@userColorsPalettes[name='Palette']/@entries[name='UnsynchronizableDiagramBackground']"/>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_1:DiagramDescription" dropDescriptions="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@defaultLayer/@toolSections.1/@ownedTools[name='DND_AbstractPackage_content']" name="Package Diagram" titleExpression="aql:self.name + ' Package Diagram'" domainClass="cinematic.AbstractPackage">
      <metamodel href="platform:/plugin/org.obeonetwork.dsl.cinematic/model/cinematic.ecore#/"/>
      <metamodel href="platform:/plugin/org.obeonetwork.dsl.cinematic/model/cinematic.ecore#//flow"/>
      <metamodel href="platform:/plugin/org.obeonetwork.dsl.cinematic/model/cinematic.ecore#//view"/>
      <metamodel href="platform:/plugin/org.obeonetwork.dsl.cinematic/model/cinematic.ecore#//toolkits"/>
      <defaultLayer name="Default">
        <containerMappings name="PAD_Package" detailDescriptions="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@defaultLayer/@toolSections.1/@ownedTools[name='CRE_Package_Diagram'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@defaultLayer/@toolSections.1/@ownedTools[name='CRE_UI_Structure']" deletionDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@defaultLayer/@toolSections.1/@ownedTools[name='PAD_DEL_PackageDiagram_node']" labelDirectEdit="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Reused%20Description']/@toolSection/@ownedTools[name='EDT_Common']" semanticCandidatesExpression="feature:subPackages" doubleClickDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@defaultLayer/@toolSections.1/@ownedTools[name='DBL_Nav_To_Package_Diagram']" domainClass="cinematic::AbstractPackage" dropDescriptions="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@defaultLayer/@toolSections.1/@ownedTools[name='DND_AbstractPackage_content']" reusedContainerMappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@defaultLayer/@containerMappings[name='PAD_Package'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@defaultLayer/@containerMappings[name='PAD_ViewContainer'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@defaultLayer/@containerMappings[name='PAD_Flow']">
          <style xsi:type="style:FlatContainerStyleDescription" arcWidth="1" arcHeight="1" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='DomainColors']/@entries[name='ISDBorder']" labelSize="10" labelColor="//@userColorsPalettes[name='DomainColors']/@entries[name='ISDLabelAndEdge']" labelAlignment="LEFT" backgroundColor="//@userColorsPalettes[name='DomainColors']/@entries[name='CinematicFillLight']" foregroundColor="//@userColorsPalettes[name='DomainColors']/@entries[name='CinematicFillLight']">
            <labelFormat>bold</labelFormat>
            <labelBorderStyle href="environment:/viewpoint#//@labelBorderStyles/@labelBorderStyleDescriptions.0"/>
          </style>
        </containerMappings>
        <containerMappings name="PAD_ViewContainer" detailDescriptions="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@defaultLayer/@toolSections.1/@ownedTools[name='CRE_UI_Structure'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@defaultLayer/@toolSections.1/@ownedTools[name='ViewContainer%20Diagram']" navigationDescriptions="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@defaultLayer/@toolSections.1/@ownedTools[name='NAV_UI_Structure']" deletionDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@defaultLayer/@toolSections.1/@ownedTools[name='PAD_DEL_PackageDiagram_node']" labelDirectEdit="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Reused%20Description']/@toolSection/@ownedTools[name='EDT_Common']" semanticCandidatesExpression="feature:viewContainers" doubleClickDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@defaultLayer/@toolSections.1/@ownedTools[name='DBL_Nav_To_ViewContainer_Diagram']" domainClass="view::ViewContainer" reusedNodeMappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@additionalLayers[name='View%20Containers']/@containerMappings[name='FLD_ViewContainer']/@subNodeMappings[name='FLD_ViewContainer'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@additionalLayers[name='View%20Containers']/@containerMappings[name='FLD_ViewContainer']/@subNodeMappings[name='FLD_ViewElement'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']/@additionalLayers[name='View%20Containers']/@containerMappings[name='FLD_ViewContainer']/@subNodeMappings[name='FLD_ViewContainerReference']" childrenPresentation="List">
          <style xsi:type="style:FlatContainerStyleDescription" arcWidth="1" arcHeight="1" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='DomainColors']/@entries[name='ISDBorder']" labelSize="10" labelExpression="service:getCinematicLabel" labelColor="//@userColorsPalettes[name='DomainColors']/@entries[name='ISDLabelAndEdge']" backgroundColor="//@userColorsPalettes[name='DomainColors']/@entries[name='CinematicFillDark']" foregroundColor="//@userColorsPalettes[name='DomainColors']/@entries[name='CinematicFillDark']">
            <labelFormat>bold</labelFormat>
          </style>
        </containerMappings>
        <containerMappings name="PAD_Flow" detailDescriptions="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@defaultLayer/@toolSections.1/@ownedTools[name='CRE_Flow_Diagram']" deletionDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@defaultLayer/@toolSections.1/@ownedTools[name='PAD_DEL_PackageDiagram_node']" labelDirectEdit="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Reused%20Description']/@toolSection/@ownedTools[name='EDT_Common']" semanticCandidatesExpression="feature:flows" doubleClickDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@defaultLayer/@toolSections.1/@ownedTools[name='DBL_Nav_To_Flow_Diagram']" domainClass="flow::Flow">
          <style xsi:type="style:FlatContainerStyleDescription" arcWidth="30" arcHeight="30" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='DomainColors']/@entries[name='ISDBorder']" labelSize="10" labelColor="//@userColorsPalettes[name='DomainColors']/@entries[name='ISDLabelAndEdge']" roundedCorner="true" backgroundColor="//@userColorsPalettes[name='DomainColors']/@entries[name='CinematicFillDark']" foregroundColor="//@userColorsPalettes[name='DomainColors']/@entries[name='CinematicFillDark']">
            <labelFormat>bold</labelFormat>
          </style>
        </containerMappings>
        <toolSections name="Tools">
          <ownedTools xsi:type="tool:ContainerCreationDescription" name="CRE_Package" label="Package" containerMappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@defaultLayer/@containerMappings[name='PAD_Package']" iconPath="/org.obeonetwork.dsl.cinematic.edit/icons/full/obj16/Package.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="cinematic.Package" referenceName="subPackages">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="['Package'+eContainer().oclAsType(cinematic::AbstractPackage).subPackages->size()/]"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerCreationDescription" name="CRE_Flow" label="Flow" containerMappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@defaultLayer/@containerMappings[name='PAD_Flow']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="flow.Flow" referenceName="flows">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="['Flow' + eContainer(cinematic::AbstractPackage).flows->size()/]"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerCreationDescription" name="CRE_ViewContainer" label="View Container" containerMappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@defaultLayer/@containerMappings[name='PAD_ViewContainer']">
            <variable name="container">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="viewContainerTypes" computationExpression="service:getWidgetsHavePropertyIsContainer"/>
              <subVariables xsi:type="tool_1:SelectModelElementVariable" name="selectedType" candidatesExpression="[viewContainerTypes->union(viewContainerTypes.eContainer(toolkits::Toolkit))->asOrderedSet()->asSequence()/]" tree="true" rootExpression="[viewContainerTypes.eContainer(toolkits::Toolkit)->asOrderedSet()->asSequence()/]" childrenExpression="feature:widgets" message="Select the type of the new view container"/>
            </variable>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="view.ViewContainer" referenceName="viewContainers" variableName="newViewContainer">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="['ViewContainer' + eContainer(cinematic::AbstractPackage).viewContainers->size()/]"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="widget" valueExpression="service:getWidgetHavePropertyIsContainer(selectedType)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="Usability" reusedTools="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Reused%20Description']/@toolSection/@ownedTools[name='MNU_AssociateToolkit']">
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="CRE_Package_Diagram" label="Package Diagram" diagramDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self"/>
            </initialOperation>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DoubleClickDescription" name="DBL_Nav_To_Package_Diagram" mappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@defaultLayer/@containerMappings[name='PAD_Package']">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:element">
                <subModelOperations xsi:type="tool:Navigation" createIfNotExistent="true" diagramDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="CRE_Flow_Diagram" label="Flow Diagram" diagramDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self"/>
            </initialOperation>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DoubleClickDescription" name="DBL_Nav_To_Flow_Diagram" mappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@defaultLayer/@containerMappings[name='PAD_Flow']">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:element">
                <subModelOperations xsi:type="tool:Navigation" createIfNotExistent="true" diagramDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Flow%20Diagram']"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="description_2:TreeCreationDescription" name="CRE_UI_Structure" label="UI Structure" browseExpression="aql:self.eContainer(cinematic::AbstractPackage)" treeDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='UI%20Structure']">
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="treeName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DoubleClickDescription" name="DBL_Nav_To_UI_Structure">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:element">
                <subModelOperations xsi:type="tool:Navigation" diagramDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="description_2:TreeNavigationDescription" name="NAV_UI_Structure" label="UI Structure" browseExpression="aql:self.eContainer(cinematic::AbstractPackage)" treeDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='UI%20Structure']">
            <containerViewVariable name="containerView"/>
            <containerVariable name="container"/>
            <representationNameVariable name="treeName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="ViewContainer Diagram" diagramDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self"/>
            </initialOperation>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DoubleClickDescription" name="DBL_Nav_To_ViewContainer_Diagram" mappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@defaultLayer/@containerMappings[name='PAD_ViewContainer']">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:element">
                <subModelOperations xsi:type="tool:Navigation" createIfNotExistent="true" diagramDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="DND_AbstractPackage_content" precondition="aql:not newViewContainer.eContainerOrSelf(diagram::DSemanticDiagram).synchronized and element.eContainer()=newContainer and Sequence{cinematic::AbstractPackage, view::ViewContainer, flow::Flow}->intersection(element.eClass().eAllSuperTypes->including(element.eClass()))->notEmpty()" mappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@defaultLayer/@containerMappings[name='PAD_Package']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:element">
                <subModelOperations xsi:type="tool_1:Switch">
                  <cases conditionExpression="aql:element.oclIsKindOf(cinematic::AbstractPackage)">
                    <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@defaultLayer/@containerMappings[name='PAD_Package']" containerViewExpression="var:newContainerView"/>
                  </cases>
                  <cases conditionExpression="aql:element.oclIsKindOf(view::ViewContainer)">
                    <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@defaultLayer/@containerMappings[name='PAD_ViewContainer']" containerViewExpression="var:newContainerView"/>
                  </cases>
                  <cases conditionExpression="aql:element.oclIsKindOf(flow::Flow)">
                    <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@defaultLayer/@containerMappings[name='PAD_Flow']" containerViewExpression="var:newContainerView"/>
                  </cases>
                  <default>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self"/>
                  </default>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:OperationAction" name="ACT_AddDirectPackageContents" label="Add direct contents" precondition="aql:not diagram.synchronized and self.oclIsKindOf(cinematic::AbstractPackage)" icon="/org.obeonetwork.dsl.environment.design/icons/full/tool/search.gif">
            <view name="views"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:For" expression="var:views" iteratorName="view">
                <subModelOperations xsi:type="tool_1:For" expression="aql:view.target.eContents()" iteratorName="element">
                  <subModelOperations xsi:type="tool_1:Switch">
                    <cases conditionExpression="aql:element.oclIsKindOf(cinematic::AbstractPackage)">
                      <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@defaultLayer/@containerMappings[name='PAD_Package']" containerViewExpression="var:view"/>
                    </cases>
                    <cases conditionExpression="aql:element.oclIsKindOf(view::ViewContainer)">
                      <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@defaultLayer/@containerMappings[name='PAD_ViewContainer']" containerViewExpression="var:view"/>
                    </cases>
                    <cases conditionExpression="aql:element.oclIsKindOf(flow::Flow)">
                      <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@defaultLayer/@containerMappings[name='PAD_Flow']" containerViewExpression="var:view"/>
                    </cases>
                    <default>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self"/>
                    </default>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="PAD_DEL_PackageDiagram_node" precondition="aql:containerView.eContainerOrSelf(diagram::DSemanticDiagram).synchronized">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:element">
                <subModelOperations xsi:type="tool_1:RemoveElement"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
      </defaultLayer>
      <additionalLayers name="Dependencies" activeByDefault="true">
        <edgeMappings name="PAD_Flow_To_ViewContainer" deletionDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@additionalLayers[name='Dependencies']/@toolSections.0/@ownedTools[name='PAD_DEL_PackageDiagram_edge']" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@defaultLayer/@containerMappings[name='PAD_Flow']" targetMapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@defaultLayer/@containerMappings[name='PAD_ViewContainer']" targetFinderExpression="service:getViewContainerAssociateAndAncestors">
          <style strokeColor="//@userColorsPalettes[name='DomainColors']/@entries[name='ISDLabelAndEdge']" lineStyle="dash">
            <centerLabelStyleDescription showIcon="false" labelColor="//@userColorsPalettes[name='DomainColors']/@entries[name='ISDLabelAndEdge']"/>
          </style>
        </edgeMappings>
        <edgeMappings name="PAD_ViewContainer_To_ViewContainer" deletionDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@additionalLayers[name='Dependencies']/@toolSections.0/@ownedTools[name='PAD_DEL_PackageDiagram_edge']" semanticCandidatesExpression="&lt;%" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@defaultLayer/@containerMappings[name='PAD_ViewContainer']" targetMapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@defaultLayer/@containerMappings[name='PAD_ViewContainer']" targetFinderExpression="service:getViewContainers" sourceFinderExpression="feature:eContainer" domainClass="view.ViewContainerReference">
          <style strokeColor="//@userColorsPalettes[name='DomainColors']/@entries[name='ISDLabelAndEdge']">
            <centerLabelStyleDescription showIcon="false" labelExpression="references" labelColor="//@userColorsPalettes[name='DomainColors']/@entries[name='ISDLabelAndEdge']"/>
          </style>
        </edgeMappings>
        <edgeMappings name="PAD_Flow_To_Subflow" deletionDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@additionalLayers[name='Dependencies']/@toolSections.0/@ownedTools[name='PAD_DEL_PackageDiagram_edge']" semanticCandidatesExpression="&lt;%" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@defaultLayer/@containerMappings[name='PAD_Flow']" targetMapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Package%20Diagram']/@defaultLayer/@containerMappings[name='PAD_Flow']" targetFinderExpression="service:getSubFlowInSubflowStates" sourceFinderExpression="feature:eContainer" domainClass="view.ViewContainerReference">
          <style strokeColor="//@userColorsPalettes[name='DomainColors']/@entries[name='ISDLabelAndEdge']">
            <centerLabelStyleDescription showIcon="false" labelColor="//@userColorsPalettes[name='DomainColors']/@entries[name='ISDLabelAndEdge']"/>
          </style>
        </edgeMappings>
        <toolSections name="Usability">
          <ownedTools xsi:type="tool:DeleteElementDescription" name="PAD_DEL_PackageDiagram_edge" precondition="aql:false">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self"/>
            </initialOperation>
          </ownedTools>
        </toolSections>
      </additionalLayers>
      <backgroundColor xsi:type="description:ComputedColor" href="../../org.obeonetwork.dsl.environment.design/description/environment.odesign#//@userColorsPalettes[name='Palette']/@entries[name='UnsynchronizableDiagramBackground']"/>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_2:TreeDescription" name="UI Structure" titleExpression="aql:self.name +' UI Structure'" domainClass="cinematic.AbstractPackage">
      <metamodel href="platform:/plugin/org.obeonetwork.dsl.cinematic/model/cinematic.ecore#/"/>
      <metamodel href="platform:/plugin/org.obeonetwork.dsl.cinematic/model/cinematic.ecore#//view"/>
      <metamodel href="platform:/plugin/org.obeonetwork.dsl.cinematic/model/cinematic.ecore#//flow"/>
      <metamodel href="platform:/plugin/org.obeonetwork.dsl.cinematic/model/cinematic.ecore#//toolkits"/>
      <subItemMappings name="UIS_Package" domainClass="cinematic.AbstractPackage" semanticCandidatesExpression="var:self">
        <defaultStyle labelSize="9">
          <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
          <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
        </defaultStyle>
        <directEdit name="EDT_Package" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='UI%20Structure']/@subItemMappings[name='UIS_Package']">
          <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="service:element.editCinematicLabel(arg0)"/>
          <mask mask="{0}"/>
          <element name="element"/>
          <root name="root"/>
        </directEdit>
        <subItemMappings name="UIS_SubPackage" domainClass="cinematic.Package" semanticCandidatesExpression="feature:subPackages" reusedTreeItemMappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='UI%20Structure']/@subItemMappings[name='UIS_Package']/@subItemMappings[name='UIS_SubPackage'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='UI%20Structure']/@subItemMappings[name='UIS_Package']/@subItemMappings[name='UIS_ViewContainer']">
          <defaultStyle>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
          </defaultStyle>
          <directEdit name="EDT_SubPackage" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='UI%20Structure']/@subItemMappings[name='UIS_Package']">
            <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="service:element.editCinematicLabel(arg0)"/>
            <mask mask="{0}"/>
            <element name="element"/>
            <root name="root"/>
          </directEdit>
          <dropTools name="DND_SubPackage" precondition="service:element.isDropAllowedForCinematicElementOn(newContainer)" forceRefresh="true" elementsToSelect="service:stdEmptyCollection">
            <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="service:element.dropOnCinematicContainer(newContainer)"/>
            <oldContainer name="oldContainer"/>
            <newContainer name="newContainer"/>
            <element name="element"/>
            <newViewContainer name="newViewContainer"/>
            <precedingSiblings name="precedingSiblings" documentation="The list of all the preceding siblings in a Drag and Drop operation"/>
          </dropTools>
          <create name="CRE_SubSubPackage" label="Package" forceRefresh="true" elementsToSelect="service:stdEmptyCollection" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='UI%20Structure']/@subItemMappings[name='UIS_Package']/@subItemMappings[name='UIS_SubPackage']">
            <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="var:element">
              <subModelOperations xsi:type="tool_1:CreateInstance" typeName="cinematic.Package" referenceName="subPackages">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="['Package'+eContainer().oclAsType(cinematic::AbstractPackage).subPackages->size()/]"/>
              </subModelOperations>
            </firstModelOperation>
            <variables name="root" documentation="The semantic element of the tree."/>
            <variables name="element" documentation="The semantic currently edited element."/>
            <variables name="container" documentation="The semantic element corresponding to the view container."/>
          </create>
          <create name="CRE_ViewContainer" label="View Container" forceRefresh="true" elementsToSelect="service:stdEmptyCollection" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='UI%20Structure']/@subItemMappings[name='UIS_Package']/@subItemMappings[name='UIS_ViewContainer']">
            <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="var:element">
              <subModelOperations xsi:type="tool_1:CreateInstance" typeName="view.ViewContainer" referenceName="viewContainers">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="['ViewContainer' + eContainer(cinematic::AbstractPackage).viewContainers->size()/]"/>
                <subModelOperations xsi:type="tool_1:SetValue" featureName="widget" valueExpression="service:getWidgetHavePropertyIsContainer(selectedType)"/>
                <subModelOperations xsi:type="tool_1:SetValue" featureName="metadatas" valueExpression="service:createWidgetMetadatas()"/>
              </subModelOperations>
            </firstModelOperation>
            <variables name="root" documentation="The semantic element of the tree."/>
            <variables name="element" documentation="The semantic currently edited element.">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="viewContainerTypes" computationExpression="service:getWidgetsHavePropertyIsContainer"/>
              <subVariables xsi:type="tool_1:SelectModelElementVariable" name="selectedType" candidatesExpression="[getToolkitsFromWidget(viewContainerTypes)/]" tree="true" rootExpression="[viewContainerTypes.eContainer(toolkits::Toolkit)->asOrderedSet()->asSequence()/]" childrenExpression="feature:widgets" message="Select the type of the new view container"/>
            </variables>
            <variables name="container" documentation="The semantic element corresponding to the view container."/>
          </create>
          <create name="CRE_Duplicate" label="Duplicate" forceRefresh="true" elementsToSelect="service:stdEmptyCollection" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='UI%20Structure']/@subItemMappings[name='UIS_Package']/@subItemMappings[name='UIS_SubPackage']">
            <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="service:element.duplicateCinematicElement()"/>
            <variables name="root" documentation="The semantic element of the tree."/>
            <variables name="element" documentation="The semantic currently edited element."/>
            <variables name="container" documentation="The semantic element corresponding to the view container."/>
          </create>
        </subItemMappings>
        <subItemMappings name="UIS_ViewContainer" domainClass="view.ViewContainer" semanticCandidatesExpression="feature:viewContainers">
          <defaultStyle labelExpression="service:getCinematicLongLabel">
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
          </defaultStyle>
          <directEdit name="EDT_ViewContainer" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='UI%20Structure']/@subItemMappings[name='UIS_Package']">
            <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="service:element.editCinematicLabel(arg0)"/>
            <mask mask="{0} : {1}"/>
            <element name="element"/>
            <root name="root"/>
          </directEdit>
          <subItemMappings name="UIS_ContainedViewContainer" domainClass="view.ViewContainer" semanticCandidatesExpression="feature:viewContainers" reusedTreeItemMappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='UI%20Structure']/@subItemMappings[name='UIS_Package']/@subItemMappings[name='UIS_ViewContainer']/@subItemMappings[name='UIS_ContainedViewContainer'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='UI%20Structure']/@subItemMappings[name='UIS_Package']/@subItemMappings[name='UIS_ViewContainer']/@subItemMappings[name='UIS_ViewElement'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='UI%20Structure']/@subItemMappings[name='UIS_Package']/@subItemMappings[name='UIS_ViewContainer']/@subItemMappings[name='UIS_ViewContainerReference']">
            <defaultStyle labelExpression="service:getCinematicLongLabel">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            </defaultStyle>
            <directEdit name="EDT_ContainedViewContainer" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='UI%20Structure']/@subItemMappings[name='UIS_Package']">
              <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="service:element.editCinematicLabel(arg0)"/>
              <mask mask="{0} : {1}"/>
              <element name="element"/>
              <root name="root"/>
            </directEdit>
            <dropTools name="DND_ContainedViewContainer" precondition="service:element.isDropAllowedForCinematicElementOn(newContainer)" forceRefresh="true" elementsToSelect="service:stdEmptyCollection">
              <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="service:element.dropOnCinematicContainer(newContainer)"/>
              <oldContainer name="oldContainer"/>
              <newContainer name="newContainer"/>
              <element name="element"/>
              <newViewContainer name="newViewContainer"/>
              <precedingSiblings name="precedingSiblings" documentation="The list of all the preceding siblings in a Drag and Drop operation"/>
            </dropTools>
            <create name="CRE_ViewContainer" label="View Container" forceRefresh="true" elementsToSelect="service:stdEmptyCollection" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='UI%20Structure']/@subItemMappings[name='UIS_Package']/@subItemMappings[name='UIS_ViewContainer']/@subItemMappings[name='UIS_ContainedViewContainer']">
              <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="var:element">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="view.ViewContainer" referenceName="ownedElements">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="['ViewContainer'+eContainer(cinematic::view::ViewContainer).viewContainers->size()/]"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="widget" valueExpression="service:getWidgetHavePropertyIsContainer(selectedType)"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="metadatas" valueExpression="service:createWidgetMetadatas()"/>
                </subModelOperations>
              </firstModelOperation>
              <variables name="root" documentation="The semantic element of the tree."/>
              <variables name="element" documentation="The semantic currently edited element.">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="viewContainerTypes" computationExpression="service:getWidgetsHavePropertyIsContainer"/>
                <subVariables xsi:type="tool_1:SelectModelElementVariable" name="selectedType" candidatesExpression="[viewContainerTypes->union(viewContainerTypes.eContainer(toolkits::Toolkit))->asOrderedSet()->asSequence()/]" tree="true" rootExpression="[viewContainerTypes.eContainer(toolkits::Toolkit)->asOrderedSet()->asSequence()/]" childrenExpression="feature:widgets" message="Select the type of the new view container"/>
              </variables>
              <variables name="container" documentation="The semantic element corresponding to the view container."/>
            </create>
            <create name="CRE_ViewElement" label="View Element" forceRefresh="true" elementsToSelect="service:stdEmptyCollection" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='UI%20Structure']/@subItemMappings[name='UIS_Package']/@subItemMappings[name='UIS_ViewContainer']/@subItemMappings[name='UIS_ViewElement']">
              <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="var:element">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="view.ViewElement" referenceName="ownedElements">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="['viewElement'+eContainer(cinematic::view::ViewContainer).ownedElements->filter(cinematic::view::ViewElement)->size()/]"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="widget" valueExpression="[getWidgetHavePropertyIsNotContainer(selectedType)/]"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="metadatas" valueExpression="service:createWidgetMetadatas()"/>
                </subModelOperations>
              </firstModelOperation>
              <variables name="root" documentation="The semantic element of the tree."/>
              <variables name="element" documentation="The semantic currently edited element.">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="viewElementTypes" computationExpression="[eContainer(cinematic::CinematicRoot).toolkits.widgets->select(widgetIsContainer|widgetIsContainer.isContainer=false)/]"/>
                <subVariables xsi:type="tool_1:SelectModelElementVariable" name="selectedType" candidatesExpression="[viewElementTypes->union(viewElementTypes.eContainer(toolkits::Toolkit))->asOrderedSet()->asSequence()/]" tree="true" rootExpression="[viewElementTypes.eContainer(toolkits::Toolkit)->asOrderedSet()->asSequence()/]" childrenExpression="feature:widgets" message="Select the type of the new view element"/>
              </variables>
              <variables name="container" documentation="The semantic element corresponding to the view container."/>
            </create>
            <create name="CRE_ViewContainerReference" label="View Container Reference" forceRefresh="true" elementsToSelect="service:stdEmptyCollection" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='UI%20Structure']/@subItemMappings[name='UIS_Package']/@subItemMappings[name='UIS_ViewContainer']/@subItemMappings[name='UIS_ViewContainerReference']">
              <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="var:element">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="view.ViewContainerReference" referenceName="ownedElements">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="viewContainer" valueExpression="var:selectedElement"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="[viewContainer.oclAsType(cinematic::view::ViewContainer).name.toLowerFirst()/]"/>
                </subModelOperations>
              </firstModelOperation>
              <variables name="root" documentation="The semantic element of the tree."/>
              <variables name="element" documentation="The semantic currently edited element.">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="allContainers" computationExpression="[container.getAllRootsForCinematic()->collect(eAllContents(cinematic::view::ViewContainer))/]"/>
                <subVariables xsi:type="tool_1:AcceleoVariable" name="allCandidates" computationExpression="service:getViewContainersPossible(allContainers)"/>
                <subVariables xsi:type="tool_1:SelectModelElementVariable" name="selectedElement" candidatesExpression="var:allCandidates" tree="true" rootExpression="[allCandidates->select(eContainer().oclIsUndefined() or (not allCandidates->includes(eContainer())))/]" childrenExpression="feature:eContents" message="Select a view container to reference"/>
              </variables>
              <variables name="container" documentation="The semantic element corresponding to the view container."/>
            </create>
            <create name="CRE_Duplicate" label="Duplicate" forceRefresh="true" elementsToSelect="service:stdEmptyCollection" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='UI%20Structure']/@subItemMappings[name='UIS_Package']/@subItemMappings[name='UIS_ViewContainer']/@subItemMappings[name='UIS_ContainedViewContainer']">
              <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="service:element.duplicateCinematicElement()"/>
              <variables name="root" documentation="The semantic element of the tree."/>
              <variables name="element" documentation="The semantic currently edited element."/>
              <variables name="container" documentation="The semantic element corresponding to the view container."/>
            </create>
          </subItemMappings>
          <subItemMappings name="UIS_ViewElement" domainClass="view.ViewElement" semanticCandidatesExpression="feature:viewElements">
            <defaultStyle labelExpression="service:getCinematicLongLabel">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            </defaultStyle>
            <directEdit name="EDT_ViewElement" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='UI%20Structure']/@subItemMappings[name='UIS_Package']">
              <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="service:element.editCinematicLabel(arg0)"/>
              <mask mask="{0} : {1}"/>
              <element name="element"/>
              <root name="root"/>
            </directEdit>
            <dropTools name="DND_ViewElement" precondition="service:element.isDropAllowedForCinematicElementOn(newContainer)" forceRefresh="true" elementsToSelect="service:stdEmptyCollection">
              <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="service:element.dropOnCinematicContainer(newContainer)"/>
              <oldContainer name="oldContainer"/>
              <newContainer name="newContainer"/>
              <element name="element"/>
              <newViewContainer name="newViewContainer"/>
              <precedingSiblings name="precedingSiblings" documentation="The list of all the preceding siblings in a Drag and Drop operation"/>
            </dropTools>
            <create name="CRE_Duplicate" label="Duplicate" forceRefresh="true" elementsToSelect="service:stdEmptyCollection" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='UI%20Structure']/@subItemMappings[name='UIS_Package']/@subItemMappings[name='UIS_SubPackage']">
              <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="service:element.duplicateCinematicElement()"/>
              <variables name="root" documentation="The semantic element of the tree."/>
              <variables name="element" documentation="The semantic currently edited element."/>
              <variables name="container" documentation="The semantic element corresponding to the view container."/>
            </create>
          </subItemMappings>
          <subItemMappings name="UIS_ViewContainerReference" domainClass="view.ViewContainerReference" semanticCandidatesExpression="feature:viewContainerReferences">
            <defaultStyle labelExpression="service:getCinematicLongLabel">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            </defaultStyle>
            <directEdit name="EDT_ViewContainerReference" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='UI%20Structure']/@subItemMappings[name='UIS_Package']">
              <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="service:element.editCinematicLabel(arg0)"/>
              <mask mask="{0} : {1}"/>
              <element name="element"/>
              <root name="root"/>
            </directEdit>
            <dropTools name="DND_ViewContainerReference" precondition="service:element.isDropAllowedForCinematicElementOn(newContainer)" forceRefresh="true" elementsToSelect="service:stdEmptyCollection">
              <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="service:element.dropOnCinematicContainer(newContainer)"/>
              <oldContainer name="oldContainer"/>
              <newContainer name="newContainer"/>
              <element name="element"/>
              <newViewContainer name="newViewContainer"/>
              <precedingSiblings name="precedingSiblings" documentation="The list of all the preceding siblings in a Drag and Drop operation"/>
            </dropTools>
            <create name="CRE_Duplicate" label="Duplicate" forceRefresh="true" elementsToSelect="service:stdEmptyCollection" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='UI%20Structure']/@subItemMappings[name='UIS_Package']/@subItemMappings[name='UIS_ViewContainer']/@subItemMappings[name='UIS_ViewContainerReference']">
              <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="service:element.duplicateCinematicElement()"/>
              <variables name="root" documentation="The semantic element of the tree."/>
              <variables name="element" documentation="The semantic currently edited element."/>
              <variables name="container" documentation="The semantic element corresponding to the view container."/>
            </create>
          </subItemMappings>
          <dropTools name="DND_ViewContainer" precondition="service:element.isDropAllowedForCinematicElementOn(newContainer)" forceRefresh="true" elementsToSelect="service:stdEmptyCollection">
            <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="service:element.dropOnCinematicContainer(newContainer)"/>
            <oldContainer name="oldContainer"/>
            <newContainer name="newContainer"/>
            <element name="element"/>
            <newViewContainer name="newViewContainer"/>
            <precedingSiblings name="precedingSiblings" documentation="The list of all the preceding siblings in a Drag and Drop operation"/>
          </dropTools>
          <create name="CRE_ViewContainer" label="View Container" forceRefresh="true" elementsToSelect="service:stdEmptyCollection" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='UI%20Structure']/@subItemMappings[name='UIS_Package']/@subItemMappings[name='UIS_ViewContainer']/@subItemMappings[name='UIS_ContainedViewContainer']">
            <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="var:element">
              <subModelOperations xsi:type="tool_1:CreateInstance" typeName="view.ViewContainer" referenceName="ownedElements">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="['ViewContainer'+eContainer(cinematic::view::ViewContainer).viewContainers->size()/]"/>
                <subModelOperations xsi:type="tool_1:SetValue" featureName="widget" valueExpression="service:getWidgetHavePropertyIsContainer(selectedType)"/>
                <subModelOperations xsi:type="tool_1:SetValue" featureName="metadatas" valueExpression="service:createWidgetMetadatas()"/>
              </subModelOperations>
            </firstModelOperation>
            <variables name="root" documentation="The semantic element of the tree."/>
            <variables name="element" documentation="The semantic currently edited element.">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="viewContainerTypes" computationExpression="service:getWidgetsHavePropertyIsContainer"/>
              <subVariables xsi:type="tool_1:SelectModelElementVariable" name="selectedType" candidatesExpression="[getToolkitsFromWidget(viewContainerTypes)/]" tree="true" rootExpression="[viewContainerTypes.eContainer(toolkits::Toolkit)->asOrderedSet()->asSequence()/]" childrenExpression="feature:widgets" message="Select the type of the new view container"/>
            </variables>
            <variables name="container" documentation="The semantic element corresponding to the view container."/>
          </create>
          <create name="CRE_ViewElement" label="View Element" forceRefresh="true" elementsToSelect="service:stdEmptyCollection" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='UI%20Structure']/@subItemMappings[name='UIS_Package']/@subItemMappings[name='UIS_ViewContainer']/@subItemMappings[name='UIS_ViewElement']">
            <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="var:element">
              <subModelOperations xsi:type="tool_1:CreateInstance" typeName="view.ViewElement" referenceName="ownedElements">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="['viewElement'+eContainer(cinematic::view::ViewContainer).ownedElements->filter(cinematic::view::ViewElement)->size()/]"/>
                <subModelOperations xsi:type="tool_1:SetValue" featureName="widget" valueExpression="[getWidgetHavePropertyIsNotContainer(selectedType)/]"/>
                <subModelOperations xsi:type="tool_1:SetValue" featureName="metadatas" valueExpression="service:createWidgetMetadatas()"/>
              </subModelOperations>
            </firstModelOperation>
            <variables name="root" documentation="The semantic element of the tree."/>
            <variables name="element" documentation="The semantic currently edited element.">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="viewElementTypes" computationExpression="[eContainer(cinematic::CinematicRoot).toolkits.widgets->select(widgetIsContainer|widgetIsContainer.isContainer=false)/]"/>
              <subVariables xsi:type="tool_1:SelectModelElementVariable" name="selectedType" candidatesExpression="[viewElementTypes->union(viewElementTypes.eContainer(toolkits::Toolkit))->asOrderedSet()->asSequence()/]" tree="true" rootExpression="[viewElementTypes.eContainer(toolkits::Toolkit)->asOrderedSet()->asSequence()/]" childrenExpression="feature:widgets" message="Select the type of the new view element"/>
            </variables>
            <variables name="container" documentation="The semantic element corresponding to the view container."/>
          </create>
          <create name="CRE_ViewContainerReference" label="View Container Reference" forceRefresh="true" elementsToSelect="service:stdEmptyCollection" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='UI%20Structure']/@subItemMappings[name='UIS_Package']/@subItemMappings[name='UIS_ViewContainer']/@subItemMappings[name='UIS_ViewContainerReference']">
            <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="var:element">
              <subModelOperations xsi:type="tool_1:CreateInstance" typeName="view.ViewContainerReference" referenceName="ownedElements">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="viewContainer" valueExpression="var:selectedElement"/>
                <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="[viewContainer.oclAsType(cinematic::view::ViewContainer).name.toLowerFirst()/]"/>
              </subModelOperations>
            </firstModelOperation>
            <variables name="root" documentation="The semantic element of the tree."/>
            <variables name="element" documentation="The semantic currently edited element.">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="allContainers" computationExpression="[container.getAllRootsForCinematic()->collect(eAllContents(cinematic::view::ViewContainer))/]"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="allCandidates" computationExpression="service:getViewContainersPossible(allContainers)"/>
              <subVariables xsi:type="tool_1:SelectModelElementVariable" name="selectedElement" candidatesExpression="var:allCandidates" tree="true" rootExpression="[allCandidates->select(eContainer().oclIsUndefined() or (not allCandidates->includes(eContainer())))/]" childrenExpression="feature:eContents" message="Select a view container to reference"/>
            </variables>
            <variables name="container" documentation="The semantic element corresponding to the view container."/>
          </create>
          <create name="CRE_Duplicate" label="Duplicate" forceRefresh="true" elementsToSelect="service:stdEmptyCollection" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='UI%20Structure']/@subItemMappings[name='UIS_Package']/@subItemMappings[name='UIS_ViewContainer']">
            <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="service:element.duplicateCinematicElement()"/>
            <variables name="root" documentation="The semantic element of the tree."/>
            <variables name="element" documentation="The semantic currently edited element."/>
            <variables name="container" documentation="The semantic element corresponding to the view container."/>
          </create>
        </subItemMappings>
        <subItemMappings name="UIS_Toolkit" domainClass="toolkits.Toolkit" semanticCandidatesExpression="service:getToolkits">
          <defaultStyle>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
          </defaultStyle>
          <delete name="DEL_DissociateToolkit" label="Dissociate Toolkit">
            <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="var:root">
              <subModelOperations xsi:type="tool_1:Unset" featureName="toolkits" elementExpression="var:element"/>
            </firstModelOperation>
            <variables name="element" documentation="The currently edited element."/>
            <variables name="root" documentation="The semantic element corresponding to the current tree."/>
          </delete>
        </subItemMappings>
        <dropTools name="DND_Package" precondition="service:element.isDropAllowedForCinematicElementOn(newContainer)" forceRefresh="true" elementsToSelect="service:stdEmptyCollection">
          <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="service:element.dropOnCinematicContainer(newContainer)"/>
          <oldContainer name="oldContainer"/>
          <newContainer name="newContainer"/>
          <element name="element"/>
          <newViewContainer name="newViewContainer"/>
          <precedingSiblings name="precedingSiblings" documentation="The list of all the preceding siblings in a Drag and Drop operation"/>
        </dropTools>
        <delete name="DEL_PreventDeletionOfRoot">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="root" documentation="The semantic element corresponding to the current tree."/>
        </delete>
        <create name="CRE_SubPackage" label="Package" forceRefresh="true" elementsToSelect="service:stdEmptyCollection" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='UI%20Structure']/@subItemMappings[name='UIS_Package']/@subItemMappings[name='UIS_SubPackage']">
          <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="var:element">
            <subModelOperations xsi:type="tool_1:CreateInstance" typeName="cinematic.Package" referenceName="subPackages">
              <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="['Package'+eContainer().oclAsType(cinematic::AbstractPackage).subPackages->size()/]"/>
            </subModelOperations>
          </firstModelOperation>
          <variables name="root" documentation="The semantic element of the tree."/>
          <variables name="element" documentation="The semantic currently edited element."/>
          <variables name="container" documentation="The semantic element corresponding to the view container."/>
        </create>
        <create name="CRE_ViewContainer" label="View Container" forceRefresh="true" elementsToSelect="service:stdEmptyCollection" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='UI%20Structure']/@subItemMappings[name='UIS_Package']/@subItemMappings[name='UIS_ViewContainer']">
          <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="var:element">
            <subModelOperations xsi:type="tool_1:CreateInstance" typeName="view.ViewContainer" referenceName="viewContainers">
              <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="['ViewContainer' + eContainer(cinematic::AbstractPackage).viewContainers->size()/]"/>
              <subModelOperations xsi:type="tool_1:SetValue" featureName="widget" valueExpression="service:getWidgetHavePropertyIsContainer(selectedType)"/>
              <subModelOperations xsi:type="tool_1:SetValue" featureName="metadatas" valueExpression="service:createWidgetMetadatas()"/>
            </subModelOperations>
          </firstModelOperation>
          <variables name="root" documentation="The semantic element of the tree."/>
          <variables name="element" documentation="The semantic currently edited element.">
            <subVariables xsi:type="tool_1:AcceleoVariable" name="viewContainerTypes" computationExpression="service:getWidgetsHavePropertyIsContainer"/>
            <subVariables xsi:type="tool_1:SelectModelElementVariable" name="selectedType" candidatesExpression="[getToolkitsFromWidget(viewContainerTypes)/]" tree="true" rootExpression="[viewContainerTypes.eContainer(toolkits::Toolkit)->asOrderedSet()->asSequence()/]" childrenExpression="feature:widgets" message="Select the type of the new view container"/>
          </variables>
          <variables name="container" documentation="The semantic element corresponding to the view container."/>
        </create>
        <create name="CRE_UsedToolkit" label="Associate toolkit" forceRefresh="true" elementsToSelect="service:stdEmptyCollection" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='UI%20Structure']/@subItemMappings[name='UIS_Package']/@subItemMappings[name='UIS_Toolkit']">
          <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="service:element.associateToolkit(selectedToolkit)"/>
          <variables name="root" documentation="The semantic element of the tree."/>
          <variables name="element" documentation="The semantic currently edited element.">
            <subVariables xsi:type="tool_1:SelectModelElementVariable" name="selectedToolkit" candidatesExpression="service:root.getCinematicProvidedToolkits()" message="Select a toolkit to associate"/>
          </variables>
          <variables name="container" documentation="The semantic element corresponding to the view container."/>
        </create>
      </subItemMappings>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_1:DiagramDescription" name="View Container Mockup" titleExpression="aql:self.name+' View Container Mockup'" domainClass="view::ViewContainer" enablePopupBars="true">
      <defaultLayer name="Default">
        <containerMappings name="VCD_RootViewContainer" detailDescriptions="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@toolSections.3/@ownedTools[name='VCD_ViewContainer_ViewContainerMockup_Create'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@toolSections.3/@ownedTools[name='VCD_ViewContainer_LayoutDiagram_Create']" navigationDescriptions="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@toolSections.3/@ownedTools[name='VCD_ViewContainer_LayoutDiagram_Navigate'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@toolSections.3/@ownedTools[name='VCD_ViewContainer_ViewContainerMockup_Navigate']" semanticCandidatesExpression="aql:self.buildWidgetPalette()" domainClass="view::ViewContainer" dropDescriptions="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@toolSections.3/@ownedTools[name='DND_ViewContainer']">
          <subContainerMappings name="VCD_ViewElement" semanticCandidatesExpression="aql:self.ownedElements" domainClass="view::ViewElement">
            <style xsi:type="style:FlatContainerStyleDescription" arcWidth="20" arcHeight="20" borderSizeComputationExpression="aql:self.getBorderSize()" labelSize="12" showIcon="false" labelExpression="aql:self.getVCDLabel()" labelColor="//@userColorsPalettes[name='CustomColors']/@entries[name='VCD_ViewElement_LabelColor']">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
              <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            </style>
          </subContainerMappings>
          <subContainerMappings name="VCD_ViewContainer" detailDescriptions="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@toolSections.3/@ownedTools[name='VCD_ViewContainer_ViewContainerMockup_Create'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@toolSections.3/@ownedTools[name='VCD_ViewContainer_LayoutDiagram_Create']" navigationDescriptions="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@toolSections.3/@ownedTools[name='VCD_ViewContainer_LayoutDiagram_Navigate'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@toolSections.3/@ownedTools[name='VCD_ViewContainer_ViewContainerMockup_Navigate']" semanticCandidatesExpression="aql:self.ownedElements" doubleClickDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@toolSections.3/@ownedTools[name='VCD_ViewContainer_ViewContainerMockup_DoubleClick_Navigate']" domainClass="view::ViewContainer" dropDescriptions="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@toolSections.3/@ownedTools[name='DND_ViewContainer']" reusedContainerMappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewContainer'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewContainerReference'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewElement']">
            <style xsi:type="style:FlatContainerStyleDescription" arcWidth="20" arcHeight="20" borderSizeComputationExpression="aql:self.getBorderSize()" labelSize="12" showIcon="false" labelExpression="aql:self.getVCDLabel()" labelColor="//@userColorsPalettes[name='CustomColors']/@entries[name='VCD_ViewElement_LabelColor']" backgroundStyle="GradientTopToBottom">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
              <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
              <labelBorderStyle href="environment:/viewpoint#//@labelBorderStyles/@labelBorderStyleDescriptions.1"/>
            </style>
          </subContainerMappings>
          <subContainerMappings name="VCD_ViewContainerReference" detailDescriptions="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@toolSections.3/@ownedTools[name='VCD_ViewContainerReference_ViewContainerMockup_Create']" navigationDescriptions="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@toolSections.3/@ownedTools[name='VCD_ViewContainerReference_ViewContainerMockup_Navigate']" semanticCandidatesExpression="aql:self.ownedElements" doubleClickDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@toolSections.3/@ownedTools[name='VCD_ViewContainerReference_ViewContainerMockup_DoubleClick_Navigate']" domainClass="view::ViewContainerReference">
            <style xsi:type="style:FlatContainerStyleDescription" arcWidth="20" arcHeight="20" borderSizeComputationExpression="1" labelSize="12" showIcon="false" labelExpression="aql:self.getVCDLabel()" backgroundStyle="GradientTopToBottom">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
              <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            </style>
          </subContainerMappings>
          <style xsi:type="style:FlatContainerStyleDescription" arcWidth="20" arcHeight="20" borderSizeComputationExpression="aql:self.getBorderSize()" labelSize="12" showIcon="false" labelExpression="aql:self.getVCDLabel()" labelColor="//@userColorsPalettes[name='CustomColors']/@entries[name='VCD_ViewElement_LabelColor']" backgroundStyle="GradientTopToBottom">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            <labelBorderStyle href="environment:/viewpoint#//@labelBorderStyles/@labelBorderStyleDescriptions.1"/>
          </style>
        </containerMappings>
        <toolSections name="Containers">
          <ownedTools xsi:type="tool:ContainerCreationDescription" documentation="container documentation" name="CRE_ViewContainer{{container}}" label="{{container}}" containerMappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewContainer']" iconPath="/org.obeonetwork.dsl.cinematic/icons/{{container}}.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="view::ViewContainer" referenceName="ownedElements">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'viewElement'+self.eContainer(view::ViewContainer).ownedElements->filter(view::ViewContainer)->size()"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="widget" valueExpression="aql:self.getWidgetByName('{{container}}')"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="metadatas" valueExpression="service:createWidgetMetadatas()"/>
                  <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewContainer']" containerViewExpression="var:containerView">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:createdView.setDefaultSize()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="Widgets">
          <ownedTools xsi:type="tool:ContainerCreationDescription" name="CRE_ViewElement{{widget}}" label="{{widget}}" containerMappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewElement']" iconPath="/org.obeonetwork.dsl.cinematic/icons/{{widget}}.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="view::ViewElement" referenceName="ownedElements">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'viewElement'+self.eContainer(view::ViewContainer).ownedElements->filter(view::ViewElement)->size()"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="widget" valueExpression="aql:self.getWidgetByName('{{widget}}')"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="metadatas" valueExpression="service:createWidgetMetadatas()"/>
                  <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewElement']" containerViewExpression="var:containerView">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:createdView.setDefaultSize()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:OperationAction" name="CRE_ViewEvent" label="Create Event" precondition="aql:self.oclIsKindOf(view::ViewElement)" icon="/org.obeonetwork.dsl.cinematic.edit/icons/full/obj16/ViewEvent.gif">
            <view name="views">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="element" computationExpression="aql:views->first().target"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="possibleEvents" computationExpression="aql:element.oclAsType(view::AbstractViewElement).widget.possibleEvents"/>
              <subVariables xsi:type="tool_1:SelectModelElementVariable" name="selectedEvent" candidatesExpression="var:possibleEvents" message="Select the type of the new view event"/>
            </view>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:element">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="view::ViewEvent" referenceName="events">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="type" valueExpression="aql:selectedEvent.oclAsType(toolkits::WidgetEventType)"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="service:getTypeName"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:OperationAction" name="BINDING_AbstractViewElement" label="Binding..." precondition="aql:self.oclIsKindOf(view::ViewContainer) or self.oclIsKindOf(view::ViewElement) " icon="/org.obeonetwork.dsl.environment.edit/icons/full/obj16/BindingInfo.gif">
            <view name="views"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:views->first().target">
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.openBoundableElementsSelectionWizard()"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="Reuse">
          <ownedTools xsi:type="tool:ContainerCreationDescription" name="CRE_ViewContainerReference" label="View Container Reference" containerMappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewContainerReference']">
            <variable name="container">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="allContainers" computationExpression="aql:container.getAllRootsForCinematic()->collect(e | e.eAllContents(view::ViewContainer))"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="allCandidates" computationExpression="aql:self.getViewContainersPossible(allContainers)"/>
              <subVariables xsi:type="tool_1:SelectModelElementVariable" name="selectedElement" candidatesExpression="var:allCandidates" tree="true" rootExpression="aql:allCandidates->select(e|e.eContainer() = null or (not allCandidates->includes(e.eContainer())))" childrenExpression="feature:eContents" message="Select a view container to reference"/>
            </variable>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="view::ViewContainerReference" referenceName="ownedElements">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="viewContainer" valueExpression="var:selectedElement"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:selectedElement.oclAsType(view::ViewContainer).name.toLowerFirst()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="Usability">
          <ownedTools xsi:type="tool:ContainerDropDescription" name="DND_ViewContainer" precondition="aql:element.isDropAllowedForCinematicElementOn(newContainer)" forceRefresh="true" mappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewContainer'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewContainerReference'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewElement']">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.dropOnCinematicContainer(newSemanticContainer)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="VCD_ViewContainer_ViewContainerMockup_Create" label="View Container Mockup" diagramDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramNavigationDescription" name="VCD_ViewContainer_ViewContainerMockup_Navigate" navigationNameExpression="aql:diagramName" diagramDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']">
            <containerViewVariable name="containerView"/>
            <containerVariable name="container"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DoubleClickDescription" name="VCD_ViewContainer_ViewContainerMockup_DoubleClick_Navigate" mappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewContainer']">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:Navigation" createIfNotExistent="true" diagramDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="VCD_ViewContainer_LayoutDiagram_Create" label="Layout Diagram" precondition="aql:self.layout&lt;>null" browseExpression="aql:self.layout" diagramDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Layout%20Diagram']">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramNavigationDescription" name="VCD_ViewContainer_LayoutDiagram_Navigate" browseExpression="aql:self.layout" navigationNameExpression="aql:diagramName" diagramDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Layout%20Diagram']">
            <containerViewVariable name="containerView"/>
            <containerVariable name="container"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="VCD_ViewContainerReference_ViewContainerMockup_Create" label="View Container Mockup" browseExpression="aql:self.viewContainer" diagramDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramNavigationDescription" name="VCD_ViewContainerReference_ViewContainerMockup_Navigate" browseExpression="aql:self.viewContainer" navigationNameExpression="aql:diagramName" diagramDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']">
            <containerViewVariable name="containerView"/>
            <containerVariable name="container"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DoubleClickDescription" name="VCD_ViewContainerReference_ViewContainerMockup_DoubleClick_Navigate" mappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewContainerReference']">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.viewContainer">
                <subModelOperations xsi:type="tool:Navigation" createIfNotExistent="true" diagramDescription="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <decorationDescriptionsSet>
          <decorationDescriptions xsi:type="description_1:MappingBasedDecoration" name="VCD_WidgetDecorator_West" position="WEST" distributionDirection="HORIZONTAL" preconditionExpression="aql:self.hasWidgetDecoration('WEST')" imageExpression="aql:self.getWidgetDecoratorFigure('WEST', containerView)" mappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewElement'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewContainer'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']"/>
          <decorationDescriptions xsi:type="description_1:MappingBasedDecoration" name="VCD_WidgetDecorator_East" position="EAST" distributionDirection="HORIZONTAL" preconditionExpression="aql:self.hasWidgetDecoration('EAST')" imageExpression="aql:self.getWidgetDecoratorFigure('EAST', containerView)" mappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewElement'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewContainer'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']"/>
          <decorationDescriptions xsi:type="description_1:MappingBasedDecoration" name="VCD_WidgetDecorator_NorthWest" position="NORTH_WEST" distributionDirection="HORIZONTAL" preconditionExpression="aql:self.hasWidgetDecoration('NORTH_WEST')" imageExpression="aql:self.getWidgetDecoratorFigure('NORTH_WEST', containerView)" mappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewElement'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewContainer'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']"/>
          <decorationDescriptions xsi:type="description_1:MappingBasedDecoration" name="VCD_WidgetDecorator_NorthEast" position="NORTH_EAST" distributionDirection="HORIZONTAL" preconditionExpression="aql:self.hasWidgetDecoration('NORTH_EAST')" imageExpression="aql:self.getWidgetDecoratorFigure('NORTH_EAST', containerView)" mappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewElement'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewContainer'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']"/>
        </decorationDescriptionsSet>
        <customization>
          <vsmElementCustomizations xsi:type="description:VSMElementCustomization" predicateExpression="aql:self.hasRoundedCorners()">
            <featureCustomizations xsi:type="description:EAttributeCustomization" appliedOn="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewElement']/@style //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewContainer']/@style //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@style //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewContainerReference']/@style" attributeName="roundedCorner" value="aql:true"/>
          </vsmElementCustomizations>
          <vsmElementCustomizations xsi:type="description:VSMElementCustomization" predicateExpression="aql:self.isUnderlined()">
            <featureCustomizations xsi:type="description:EAttributeCustomization" appliedOn="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewElement']/@style //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewContainer']/@style //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@style //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewContainerReference']/@style" attributeName="labelFormat" value="underline"/>
          </vsmElementCustomizations>
          <vsmElementCustomizations xsi:type="description:VSMElementCustomization" predicateExpression="aql:true">
            <featureCustomizations xsi:type="description:EAttributeCustomization" appliedOn="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewElement']/@style //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewContainer']/@style //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@style //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewContainerReference']/@style" attributeName="labelAlignment" value="aql:self.getLabelHorizontalAlignment()"/>
            <featureCustomizations xsi:type="description:EAttributeCustomization" appliedOn="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@style //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewContainer']/@style //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewContainerReference']/@style //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewElement']/@style" attributeName="labelSize" value="aql:self.getLabelFontSize()"/>
          </vsmElementCustomizations>
          <vsmElementCustomizations xsi:type="description:VSMElementCustomization" predicateExpression="aql:self.isLabelHidden()">
            <featureCustomizations xsi:type="description:EAttributeCustomization" appliedOn="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewElement']/@style //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewContainer']/@style //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@style //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewContainerReference']/@style" attributeName="hideLabelByDefault" value="aql:true"/>
          </vsmElementCustomizations>
        </customization>
      </defaultLayer>
      <additionalLayers name="Example">
        <customization>
          <vsmElementCustomizations xsi:type="description:VSMElementCustomization">
            <featureCustomizations xsi:type="description:EAttributeCustomization" appliedOn="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@style //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewContainer']/@style //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewContainerReference']/@style //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewElement']/@style" attributeName="labelExpression" value="service:evaluateExampleExpression"/>
          </vsmElementCustomizations>
        </customization>
      </additionalLayers>
      <additionalLayers name="TabOrder" label="Tab Order">
        <edgeMappings name="VCD_TabOrder" sourceMapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewContainer'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewContainerReference'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewElement']" targetMapping="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewContainer'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewContainerReference'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewElement']" targetFinderExpression="aql:self.getNextTabElement()">
          <style lineStyle="dash_dot" sizeComputationExpression="4">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='orange']"/>
            <centerLabelStyleDescription labelSize="12">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
      </additionalLayers>
      <additionalLayers name="ViewEvents" label="View Events">
        <decorationDescriptionsSet>
          <decorationDescriptions xsi:type="description_1:MappingBasedDecoration" name="VCD_WidgetEventDecorator" position="NORTH_EAST" distributionDirection="HORIZONTAL" preconditionExpression="aql:self.oclAsType(view::AbstractViewElement).events->notEmpty()" imageExpression="/org.obeonetwork.dsl.cinematic.edit/icons/full/obj16/ViewEvent.gif" tooltipExpression="aql:self.target.oclAsType(view::AbstractViewElement).events.name->sep('\n')->toString()" mappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewContainer'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewContainerReference'] //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='View%20Container%20Mockup']/@defaultLayer/@containerMappings[name='VCD_RootViewContainer']/@subContainerMappings[name='VCD_ViewElement']"/>
        </decorationDescriptionsSet>
      </additionalLayers>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_1:DiagramDescription" name="Layout Diagram" titleExpression="aql:self.eContainer(cinematic::NamedElement).name+' Layout Diagram'" domainClass="view::Layout" enablePopupBars="true">
      <defaultLayer name="Default">
        <containerMappings name="LAD_Layout" semanticCandidatesExpression="aql:self" domainClass="view::Layout">
          <subContainerMappings name="LAD_ChildLayout" semanticCandidatesExpression="aql:self.ownedLayouts" domainClass="view::Layout" reusedContainerMappings="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Layout%20Diagram']/@defaultLayer/@containerMappings[name='LAD_Layout']/@subContainerMappings[name='LAD_ChildLayout']">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="2" labelSize="12" showIcon="false" labelExpression="service:getCinematicLongLabel()">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='red']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
              <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            </style>
          </subContainerMappings>
          <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="2" labelSize="12" showIcon="false" labelExpression="service:getCinematicLongLabel()">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='red']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
          </style>
        </containerMappings>
        <customization>
          <vsmElementCustomizations xsi:type="description:VSMElementCustomization" predicateExpression="aql:self.direction=view::LayoutDirection::HORIZONTAL">
            <featureCustomizations xsi:type="description:EReferenceCustomization" appliedOn="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Layout%20Diagram']/@defaultLayer/@containerMappings[name='LAD_Layout']/@style //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Layout%20Diagram']/@defaultLayer/@containerMappings[name='LAD_Layout']/@subContainerMappings[name='LAD_ChildLayout']/@style" referenceName="borderColor">
              <value href="environment:/viewpoint#//@systemColors/@entries[name='dark_green']"/>
            </featureCustomizations>
          </vsmElementCustomizations>
          <vsmElementCustomizations xsi:type="description:VSMElementCustomization" predicateExpression="aql:self.viewElement=null">
            <featureCustomizations xsi:type="description:EAttributeCustomization" appliedOn="//@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Layout%20Diagram']/@defaultLayer/@containerMappings[name='LAD_Layout']/@style //@ownedViewpoints[name='Cinematic%20Views']/@ownedRepresentations[name='Layout%20Diagram']/@defaultLayer/@containerMappings[name='LAD_Layout']/@subContainerMappings[name='LAD_ChildLayout']/@style" attributeName="borderLineStyle" value="dash"/>
          </vsmElementCustomizations>
        </customization>
      </defaultLayer>
    </ownedRepresentations>
    <ownedJavaExtensions qualifiedClassName="org.obeonetwork.dsl.cinematic.design.services.CinematicLabelServices"/>
    <ownedJavaExtensions qualifiedClassName="org.obeonetwork.dsl.cinematic.design.services.CinematicEcoreServices"/>
    <ownedJavaExtensions qualifiedClassName="org.obeonetwork.dsl.cinematic.design.services.flows.FlowsUtil"/>
    <ownedJavaExtensions qualifiedClassName="org.obeonetwork.dsl.cinematic.design.services.CinematicDropServices"/>
    <ownedJavaExtensions qualifiedClassName="org.obeonetwork.dsl.cinematic.design.services.CinematicToolkitsServices"/>
    <ownedJavaExtensions qualifiedClassName="org.obeonetwork.dsl.cinematic.design.services.CinematicBindingServices"/>
    <ownedJavaExtensions qualifiedClassName="org.obeonetwork.dsl.cinematic.design.services.CinematicWidgetServices"/>
    <ownedJavaExtensions qualifiedClassName="org.obeonetwork.dsl.cinematic.design.services.CinematicFlowServices"/>
    <ownedJavaExtensions qualifiedClassName="org.obeonetwork.dsl.cinematic.design.services.view.ViewUtil"/>
    <ownedJavaExtensions qualifiedClassName="org.eclipse.sirius.common.tools.api.interpreter.StandardServices"/>
    <ownedJavaExtensions qualifiedClassName="org.obeonetwork.dsl.cinematic.design.services.CinematicLayoutServices"/>
    <ownedJavaExtensions qualifiedClassName="org.obeonetwork.dsl.cinematic.design.services.CinematicVCDLabelServices"/>
    <ownedJavaExtensions qualifiedClassName="org.obeonetwork.utils.common.ui.services.DebugServices"/>
    <ownedJavaExtensions qualifiedClassName="org.obeonetwork.dsl.environment.design.services.DesignServices"/>
  </ownedViewpoints>
  <userColorsPalettes name="CustomColors">
    <entries xsi:type="description:ComputedColor" name="VCD_ViewElement_LabelColor" red="aql:self.getLabelColorRed()" green="aql:self.getLabelColorGreen()" blue="aql:self.getLabelColorBlue()"/>
  </userColorsPalettes>
  <userColorsPalettes name="DomainColors">
    <entries xsi:type="description:UserFixedColor" red="0" green="43" blue="60" name="ISDLabelAndEdge"/>
    <entries xsi:type="description:UserFixedColor" red="136" green="136" blue="136" name="ISDBorder"/>
    <entries xsi:type="description:UserFixedColor" red="255" green="255" blue="255" name="CinematicFillLight"/>
    <entries xsi:type="description:UserFixedColor" red="238" green="248" blue="255" name="CinematicFillDark"/>
  </userColorsPalettes>
  <extensions xsi:type="properties:ViewExtensionDescription" name="Properties">
    <metamodels href="http://www.obeonetwork.org/dsl/cinematic/3.0.0#/"/>
    <metamodels href="http://www.obeonetwork.org/dsl/cinematic/3.0.0#//flow"/>
    <metamodels href="http://www.obeonetwork.org/dsl/cinematic/3.0.0#//toolkits"/>
    <metamodels href="http://www.obeonetwork.org/dsl/cinematic/3.0.0#//view"/>
    <metamodels href="http://www.obeonetwork.org/dsl/soa/4.0.0#/"/>
    <categories name="Default Category">
      <pages name="AbstractPackage Page {tabOrder=100}" labelExpression="aql:self.eClass().name" domainClass="cinematic::AbstractPackage" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.0/@groups.0"/>
      <pages name="Toolkits Page {tabOrder=200}" labelExpression="Toolkits" domainClass="cinematic::CinematicRoot" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.0/@groups.1"/>
      <groups name="AbstractPackage Group" labelExpression="Properties" domainClass="cinematic::AbstractPackage" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:TextDescription" name="cinematic::AbstractPackage name" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('name')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('name'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="aql:self.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="var:newValue"/>
          </initialOperation>
          <conditionalStyles preconditionExpression="aql:self.eClass().getEStructuralFeature('name').lowerBound = 1">
            <style>
              <labelFontFormat>bold</labelFontFormat>
            </style>
          </conditionalStyles>
        </controls>
        <controls xsi:type="properties:TextAreaDescription" name="cinematic::AbstractPackage description" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('description')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('description'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('description').changeable" valueExpression="aql:self.description">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="description" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="cinematic::AbstractPackage subPackages" labelExpression="aql:'SubPackages :'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('subPackages'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('subPackages').changeable">
          <customExpressions name="referenceNameExpression" customExpression="aql:'subPackages'"/>
          <customExpressions name="enableAddButtonExpression" customExpression="aql:false"/>
          <customExpressions name="enableBrowseButtonExpression" customExpression="aql:false"/>
          <customExpressions name="enableRemoveButtonExpression" customExpression="aql:false"/>
          <customOperations name="onDoubleClickOperation">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:selection->first()">
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Edit SubPackage Dialog">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation/>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation/>
                  </buttons>
                  <page name="Edit SubPackage Page" labelExpression="SubPackage" domainClass="cinematic::Package" semanticCandidateExpression="var:self" extends="//@extensions.0/@categories.0/@pages.0"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </customOperations>
        </controls>
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="cinematic::AbstractPackage flows" labelExpression="aql:'Flows :'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('flows'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('flows').changeable">
          <customExpressions name="referenceNameExpression" customExpression="aql:'flows'"/>
          <customExpressions name="enableAddButtonExpression" customExpression="aql:false"/>
          <customExpressions name="enableBrowseButtonExpression" customExpression="aql:false"/>
          <customExpressions name="enableRemoveButtonExpression" customExpression="aql:false"/>
          <customOperations name="onDoubleClickOperation">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:selection->first()">
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Edit Flow Dialog">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation/>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation/>
                  </buttons>
                  <page name="Edit Flow Page" extends="//@extensions.0/@categories.2/@pages.5"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </customOperations>
        </controls>
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="cinematic::AbstractPackage viewContainers" labelExpression="aql:'ViewContainers :'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('viewContainers'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('viewContainers').changeable">
          <customExpressions name="referenceNameExpression" customExpression="aql:'viewContainers'"/>
          <customExpressions name="enableAddButtonExpression" customExpression="aql:false"/>
          <customExpressions name="enableBrowseButtonExpression" customExpression="aql:false"/>
          <customExpressions name="enableRemoveButtonExpression" customExpression="aql:false"/>
          <customOperations name="onDoubleClickOperation">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:selection->first()">
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Edit viewContainer Dialog">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation/>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation/>
                  </buttons>
                  <page name="Edit ViewContainer Page" labelExpression="ViewContainer" domainClass="view::ViewContainer" semanticCandidateExpression="var:self" extends="//@extensions.0/@categories.1/@pages.3"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </customOperations>
        </controls>
      </groups>
      <groups name="Toolkits Group" labelExpression="Properties" domainClass="cinematic::CinematicRoot" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="cinematic::CinematicRoot toolkits" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('toolkits')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('toolkits'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('toolkits').changeable">
          <customExpressions name="referenceNameExpression" customExpression="aql:'toolkits'"/>
          <customExpressions name="hideBrowseButtonExpression" customExpression="aql:true"/>
          <customOperations name="addButtonOperation">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.openToolkitSelectionWizard()"/>
            </initialOperation>
          </customOperations>
        </controls>
      </groups>
    </categories>
    <categories name="View">
      <pages name="ViewAction Page {tabOrder=100}" labelExpression="ViewAction" domainClass="view::ViewAction" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.1/@groups.1"/>
      <pages name="ViewEvent Page {tabOrder=100}" labelExpression="ViewEvent" domainClass="view::ViewEvent" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.1/@groups.2"/>
      <pages name="ViewElement Page {tabOrder=100}" labelExpression="ViewElement" domainClass="view::ViewElement" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.1/@groups.3 //@extensions.0/@categories.1/@groups.7"/>
      <pages name="ViewContainer Page {tabOrder=100}" labelExpression="ViewContainer" domainClass="view::ViewContainer" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.1/@groups.4 //@extensions.0/@categories.1/@groups.7"/>
      <pages name="ViewContainerReference Page {tabOrder=100}" labelExpression="ViewContainerReference" domainClass="view::ViewContainerReference" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.1/@groups.5"/>
      <pages name="Help Page {tabOrder=800}" labelExpression="Help" domainClass="view::AbstractViewElement" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.1/@groups.6"/>
      <groups name="AbstractViewElement Group" documentation="The goal of this group is to hold widget that are meant to be extended by other widget like ViewElement Group, ViewContainer Group and ViewContainerReference Group." domainClass="view::AbstractViewElement">
        <controls xsi:type="properties:TextDescription" name="view::AbstractViewElement name" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('name')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('name'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="aql:self.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="var:newValue"/>
          </initialOperation>
          <conditionalStyles preconditionExpression="aql:self.eClass().getEStructuralFeature('name').lowerBound = 1">
            <style>
              <labelFontFormat>bold</labelFontFormat>
            </style>
          </conditionalStyles>
        </controls>
        <controls xsi:type="properties:TextDescription" name="view::AbstractViewElement label" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('label')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('label'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.label">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="label" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="view::AbstractViewElement widget" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('widget')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('widget'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('widget').changeable">
          <customExpressions name="referenceNameExpression" customExpression="aql:'widget'"/>
        </controls>
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="view::AbstractViewElement actions" labelExpression="aql:'Actions :'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('actions'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('actions').changeable">
          <customExpressions name="referenceNameExpression" customExpression="aql:'actions'"/>
          <customExpressions name="enableAddButtonExpression" customExpression="aql:false"/>
          <customExpressions name="enableBrowseButtonExpression" customExpression="aql:false"/>
          <customExpressions name="enableRemoveButtonExpression" customExpression="aql:false"/>
          <customOperations name="onDoubleClickOperation">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:selection->first()">
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Edit View Action Dialog">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation/>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation/>
                  </buttons>
                  <page name="Edit View Action Page" labelExpression="ViewAction" domainClass="view::ViewAction" semanticCandidateExpression="var:self" extends="//@extensions.0/@categories.1/@pages.0"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </customOperations>
        </controls>
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="view::AbstractViewElement events" labelExpression="aql:'Event :'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('events'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('events').changeable">
          <customExpressions name="referenceNameExpression" customExpression="aql:'events'"/>
          <customExpressions name="enableAddButtonExpression" customExpression="aql:false"/>
          <customExpressions name="enableBrowseButtonExpression" customExpression="aql:false"/>
          <customExpressions name="enableRemoveButtonExpression" customExpression="aql:false"/>
          <customOperations name="onDoubleClickOperation">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:selection->first()">
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Edit View Event Dialog">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation/>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation/>
                  </buttons>
                  <page name="Edit View Event Page" labelExpression="ViewEvent" domainClass="view::ViewEvent" semanticCandidateExpression="var:self" extends="//@extensions.0/@categories.1/@pages.1"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </customOperations>
        </controls>
        <controls xsi:type="properties:TextAreaDescription" name="view::AbstractViewElement description" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('description')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('description'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('description').changeable" valueExpression="aql:self.description">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="description" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
      </groups>
      <groups name="ViewAction Group" labelExpression="Group" domainClass="view::ViewAction" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:TextDescription" name="view::ViewAction name" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('name')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('name'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="aql:self.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="var:newValue"/>
          </initialOperation>
          <conditionalStyles preconditionExpression="aql:self.eClass().getEStructuralFeature('name').lowerBound = 1">
            <style>
              <labelFontFormat>bold</labelFontFormat>
            </style>
          </conditionalStyles>
        </controls>
        <controls xsi:type="properties:TextAreaDescription" name="view::ViewAction description" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('description')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('description'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('description').changeable" valueExpression="aql:self.description">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="description" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
      </groups>
      <groups name="ViewEvent Group" labelExpression="Properties" domainClass="view::ViewEvent" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:TextDescription" name="view::ViewEvent name" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('name')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('name'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="aql:self.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="var:newValue"/>
          </initialOperation>
          <conditionalStyles preconditionExpression="aql:self.eClass().getEStructuralFeature('name').lowerBound = 1">
            <style>
              <labelFontFormat>bold</labelFontFormat>
            </style>
          </conditionalStyles>
        </controls>
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="view::ViewEvent type" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('type')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('type'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('type').changeable">
          <customExpressions name="referenceNameExpression" customExpression="aql:'type'"/>
        </controls>
        <controls xsi:type="properties:TextAreaDescription" name="view::ViewEvent description" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('description')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('description'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('description').changeable" valueExpression="aql:self.description">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="description" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
      </groups>
      <groups name="ViewElement Group" labelExpression="Properties" domainClass="view::ViewElement" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:TextDescription" name="view::ViewElement name" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('name')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('name'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="aql:self.name" extends="//@extensions.0/@categories.1/@groups.0/@controls.0"/>
        <controls xsi:type="properties:TextDescription" name="view::ViewElement label" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('label')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('label'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.label" extends="//@extensions.0/@categories.1/@groups.0/@controls.1"/>
        <controls xsi:type="properties:TextAreaDescription" name="view::ViewElement description" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('description')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('description'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('description').changeable" valueExpression="aql:self.description" extends="//@extensions.0/@categories.1/@groups.0/@controls.5"/>
        <controls xsi:type="properties:TextAreaDescription" name="view::viewElement example" labelExpression="Example:" helpExpression="An example of the ViewElement" isEnabledExpression="aql:self.eClass().getEStructuralFeature('example').changeable" valueExpression="aql:self.example">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="example" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="view::ViewElement widget" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('widget')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('widget'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('widget').changeable" extends="//@extensions.0/@categories.1/@groups.0/@controls.2"/>
        <controls xsi:type="properties:CheckboxDescription" name="view::ViewElement required" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('required'))" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('required'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('required').changeable" valueExpression="aql:self.required">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="required" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="view::ViewElement type" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('type')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('type'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('type').changeable">
          <customExpressions name="referenceNameExpression" customExpression="aql:'type'"/>
        </controls>
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="view::ViewElement actions" labelExpression="aql:'Actions :'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('actions'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('actions').changeable" extends="//@extensions.0/@categories.1/@groups.0/@controls.3"/>
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="view::ViewElement events" labelExpression="aql:'Event :'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('events'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('events').changeable" extends="//@extensions.0/@categories.1/@groups.0/@controls.4"/>
      </groups>
      <groups name="ViewContainer Group" labelExpression="Properties" domainClass="view::ViewContainer" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:TextDescription" name="view::ViewContainer name" extends="//@extensions.0/@categories.1/@groups.0/@controls.0"/>
        <controls xsi:type="properties:TextDescription" name="view::ViewContainer label" extends="//@extensions.0/@categories.1/@groups.0/@controls.1"/>
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="view::ViewContainer widget" extends="//@extensions.0/@categories.1/@groups.0/@controls.2"/>
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="view::ViewContainer actions" extends="//@extensions.0/@categories.1/@groups.0/@controls.3"/>
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="view::ViewContainer events" extends="//@extensions.0/@categories.1/@groups.0/@controls.4"/>
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="view::ViewContainer ownedElements" labelExpression="aql:'OwnedElements :'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('ownedElements'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ownedElements').changeable">
          <customExpressions name="referenceNameExpression" customExpression="aql:'ownedElements'"/>
          <customExpressions name="enableAddButtonExpression" customExpression="aql:false"/>
          <customExpressions name="enableBrowseButtonExpression" customExpression="aql:false"/>
          <customExpressions name="enableRemoveButtonExpression" customExpression="aql:false"/>
          <customOperations name="onDoubleClickOperation">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:selection->first()">
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Edit ViewContainer ownedElements as ViewContainer Dialog">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation/>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation/>
                  </buttons>
                  <page name="Edit View Container Page" labelExpression="ViewContainer" domainClass="view::ViewContainer" semanticCandidateExpression="var:self" extends="//@extensions.0/@categories.1/@pages.3"/>
                </subModelOperations>
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Edit ViewContainer ownedElements as ViewElement Dialog">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation/>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation/>
                  </buttons>
                  <page name="Edit View Element Page" labelExpression="ViewElement" domainClass="view::ViewElement" semanticCandidateExpression="var:self" extends="//@extensions.0/@categories.1/@pages.2"/>
                </subModelOperations>
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Edit ViewContainer ownedElements as ViewContainerReference Dialog">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation/>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation/>
                  </buttons>
                  <page name="Edit View Container Reference Page" labelExpression="ViewContainerReference" domainClass="view::ViewContainerReference" semanticCandidateExpression="var:self" extends="//@extensions.0/@categories.1/@pages.4"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </customOperations>
        </controls>
        <controls xsi:type="properties:TextAreaDescription" name="view::ViewContainer description" extends="//@extensions.0/@categories.1/@groups.0/@controls.5"/>
      </groups>
      <groups name="ViewContainerReference Group" labelExpression="Properties" domainClass="view::ViewContainerReference" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:TextDescription" name="view::ViewContainerReference name" extends="//@extensions.0/@categories.1/@groups.0/@controls.0"/>
        <controls xsi:type="properties:TextDescription" name="view::ViewContainerReference label" extends="//@extensions.0/@categories.1/@groups.0/@controls.1"/>
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="view::AbstractViewElement viewContainer" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('viewContainer')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('viewContainer'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('viewContainer').changeable">
          <customExpressions name="referenceNameExpression" customExpression="aql:'viewContainer'"/>
        </controls>
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="view::ViewContainerReference widget" extends="//@extensions.0/@categories.1/@groups.0/@controls.2"/>
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="view::ViewContainerReference actions" extends="//@extensions.0/@categories.1/@groups.0/@controls.3"/>
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="view::ViewContainerReference events" extends="//@extensions.0/@categories.1/@groups.0/@controls.4"/>
        <controls xsi:type="properties:TextAreaDescription" name="view::ViewContainerReference description" extends="//@extensions.0/@categories.1/@groups.0/@controls.5"/>
      </groups>
      <groups name="Documentation group" labelExpression="Help" domainClass="view::AbstractViewElement" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:TextAreaDescription" name="MetadataHelp" isEnabledExpression="aql:false" lineCount="10" valueExpression="aql:self.widget.documentation">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self"/>
          </initialOperation>
        </controls>
      </groups>
      <groups name="ViewStyle group" labelExpression="Style" domainClass="view::ViewStyle" semanticCandidateExpression="aql:self.viewStyle">
        <controls xsi:type="properties:TextDescription" name="view::ViewStyle fontSize" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('fontSize')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('fontSize'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('fontSize').changeable" valueExpression="aql:self.fontSize">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="fontSize" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="view::ViewStyle fontColor" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('fontColor')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('fontColor'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('fontColor').changeable" valueExpression="aql:self.fontColor" candidatesExpression="aql:self.getAvailableColorIdentifiers()" candidateDisplayExpression="aql:candidate">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="fontColor" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="view::ViewStyle labelHorizontalAlignment" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('labelHorizontalAlignment')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('labelHorizontalAlignment'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('labelHorizontalAlignment').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('labelHorizontalAlignment').eType.getEEnumLiteralByLiteral(self.labelHorizontalAlignment.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('labelHorizontalAlignment').eType.eLiterals" candidateDisplayExpression="aql:candidate.literal">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="labelHorizontalAlignment" valueExpression="aql:newValue.instance"/>
          </initialOperation>
        </controls>
      </groups>
    </categories>
    <categories name="Flow">
      <pages name="SubFlowState Page {tabOrder=100}" labelExpression="SubFlowState" domainClass="flow::SubflowState" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.2/@groups.3"/>
      <pages name="FlowEvent Page {tabOrder=100}" labelExpression="FlowEvent" domainClass="flow::FlowEvent" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.2/@groups.4"/>
      <pages name="NamedFlowState Page {tabOrder=100}" labelExpression="aql:self.eClass().name" domainClass="flow::NamedFlowState" semanticCandidateExpression="var:self" preconditionExpression="aql:not(self.oclIsKindOf(flow::ViewState) or self.oclIsKindOf(flow::SubflowState))" groups="//@extensions.0/@categories.2/@groups.1"/>
      <pages name="ViewState Page {tabOrder=100}" labelExpression="ViewState" domainClass="flow::ViewState" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.2/@groups.2"/>
      <pages name="Transition Page {tabOrder=100}" labelExpression="Transition" domainClass="flow::Transition" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.2/@groups.6"/>
      <pages name="Flow Page {tabOrder=100}" labelExpression="Flow" domainClass="flow::Flow" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.2/@groups.7"/>
      <groups name="FlowState Goupe" documentation="The goal of this group is to hold widget that are meant to be extended by other widget like ... TOFINISH" domainClass="flow::FlowState">
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="flow::FlowState actions" labelExpression="aql:'Actions :'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('actions'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('actions').changeable">
          <customExpressions name="referenceNameExpression" customExpression="aql:'actions'"/>
          <customOperations name="addButtonOperation">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:CreateInstance" typeName="flow::FlowAction" referenceName="actions" variableName="flowAction">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:''"/>
                <subModelOperations xsi:type="tool_1:SetValue" featureName="description" valueExpression="aql:''"/>
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Create FlowAction Dialog">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation>
                      <firstModelOperations xsi:type="tool_1:RemoveElement"/>
                    </initialOperation>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation/>
                  </buttons>
                  <page name="Create FlowState Action Page" labelExpression="FlowAction" domainClass="flow::FlowAction" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.2/@groups.0/@controls.0/@customOperations.0/@initialOperation/@firstModelOperations/@subModelOperations.2/@groups.0"/>
                  <groups name="Create FlowState Action Group" extends="//@extensions.0/@categories.2/@groups.5"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </customOperations>
          <customOperations name="onDoubleClickOperation">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:selection->first()">
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Edit FlowState Action Dialog">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation/>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation/>
                  </buttons>
                  <page name="Edit FlowState Action Page" labelExpression="FlowAction" domainClass="flow::FlowAction" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.2/@groups.0/@controls.0/@customOperations.1/@initialOperation/@firstModelOperations/@subModelOperations.0/@groups.0"/>
                  <groups name="Edit FlowState Action Group" extends="//@extensions.0/@categories.2/@groups.5"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </customOperations>
        </controls>
        <controls xsi:type="properties:TextAreaDescription" name="flow::FlowState description" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('description')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('description'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('description').changeable" valueExpression="aql:self.description">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="description" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
      </groups>
      <groups name="NamedFlowState Group" labelExpression="Properties" domainClass="flow::NamedFlowState" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:TextDescription" name="flow::NamedFlowState name" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('name')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('name'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="aql:self.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="var:newValue"/>
          </initialOperation>
          <conditionalStyles preconditionExpression="aql:self.eClass().getEStructuralFeature('name').lowerBound = 1">
            <style>
              <labelFontFormat>bold</labelFontFormat>
            </style>
          </conditionalStyles>
        </controls>
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="flow::NamedFlowState actions" extends="//@extensions.0/@categories.2/@groups.0/@controls.0"/>
        <controls xsi:type="properties:TextAreaDescription" name="flow::NamedFlowState description" extends="//@extensions.0/@categories.2/@groups.0/@controls.1"/>
      </groups>
      <groups name="ViewState Group" labelExpression="Properties" domainClass="flow::ViewState" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:TextDescription" name="flow::ViewState name" extends="//@extensions.0/@categories.2/@groups.1/@controls.0"/>
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="flow::ViewState actions" extends="//@extensions.0/@categories.2/@groups.1/@controls.1"/>
        <controls xsi:type="properties:CheckboxDescription" name="flow::ViewState newInstance" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('newInstance'))" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('newInstance'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('newInstance').changeable" valueExpression="aql:self.newInstance">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="newInstance" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="flow::ViewState refresh" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('refresh'))" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('refresh'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('refresh').changeable" valueExpression="aql:self.refresh">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="refresh" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="flow::ViewState viewContainers" labelExpression="aql:'ViewContainers :'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('viewContainers'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('viewContainers').changeable">
          <customExpressions name="referenceNameExpression" customExpression="aql:'viewContainers'"/>
          <customOperations name="onDoubleClickOperation">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:selection->first()">
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Edit ViewState viewContainer Dialog">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation/>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation/>
                  </buttons>
                  <page name="Edit View Container Page" labelExpression="ViewContainer" domainClass="view::ViewContainer" semanticCandidateExpression="var:self" extends="//@extensions.0/@categories.1/@pages.3"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </customOperations>
          <customOperations name="browseButtonOperation">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.openViewContainerSelectionDialog()"/>
            </initialOperation>
          </customOperations>
        </controls>
        <controls xsi:type="properties:TextAreaDescription" name="flow::ViewState description" extends="//@extensions.0/@categories.2/@groups.1/@controls.2"/>
      </groups>
      <groups name="SubFlowState Group" labelExpression="Properties" domainClass="flow::SubflowState" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="flow::SubflowState subflow" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('subflow')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('subflow'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('subflow').changeable">
          <customExpressions name="referenceNameExpression" customExpression="aql:'subflow'"/>
        </controls>
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="flow::SubflowState actions" extends="//@extensions.0/@categories.2/@groups.0/@controls.0"/>
        <controls xsi:type="properties:TextAreaDescription" name="flow::SubflowState description" extends="//@extensions.0/@categories.2/@groups.0/@controls.1"/>
      </groups>
      <groups name="FlowEvent Group" labelExpression="Properties" domainClass="flow::FlowEvent" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:TextDescription" name="flow::NamedFlowState name" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('name')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('name'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="aql:self.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="var:newValue"/>
          </initialOperation>
          <conditionalStyles preconditionExpression="aql:self.eClass().getEStructuralFeature('name').lowerBound = 1">
            <style>
              <labelFontFormat>bold</labelFontFormat>
            </style>
          </conditionalStyles>
        </controls>
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="flow::NamedFlowState binds" labelExpression="aql:'Binds :'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('binds'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('binds').changeable">
          <customExpressions name="referenceNameExpression" customExpression="aql:'binds'"/>
          <customExpressions name="enableAddButtonExpression" customExpression="aql:true"/>
          <customExpressions name="enableBrowseButtonExpression" customExpression="aql:true"/>
          <customExpressions name="enableRemoveButtonExpression" customExpression="aql:true"/>
          <customOperations name="onDoubleClickOperation">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:selection->first()">
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Edit FlowEvent bind Dialog">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation/>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation/>
                  </buttons>
                  <page name="Edit FlowEvent bind Page" extends="//@extensions.0/@categories.1/@pages.1"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </customOperations>
        </controls>
        <controls xsi:type="properties:TextAreaDescription" name="flow::FlowState description" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('description')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('description'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('description').changeable" valueExpression="aql:self.description">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="description" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
      </groups>
      <groups name="FlowAction Group" labelExpression="Properties" domainClass="flow::FlowAction" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:TextDescription" name="flow::FlowAction name" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('name')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('name'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="aql:self.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="var:newValue"/>
          </initialOperation>
          <conditionalStyles preconditionExpression="aql:self.eClass().getEStructuralFeature('name').lowerBound = 1">
            <style>
              <labelFontFormat>bold</labelFontFormat>
            </style>
          </conditionalStyles>
        </controls>
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="flow::FlowAction operations" labelExpression="aql:'Operations :'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('operations'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('operations').changeable">
          <customExpressions name="referenceNameExpression" customExpression="aql:'operations'"/>
          <customOperations name="onDoubleClickOperation">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:selection->first()">
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Edit FlowAction operation Dialog">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation/>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation/>
                  </buttons>
                  <page name="Edit FlowAction operation Page" labelExpression="Operation" domainClass="soa::Operation" semanticCandidateExpression="var:self">
                    <extends href="platform:/plugin/org.obeonetwork.dsl.soa.design/description/soa.odesign#//@extensions.0/@categories.1/@pages.0"/>
                  </page>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </customOperations>
        </controls>
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="flow::FlowAction calls" labelExpression="aql:'Calls :'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('calls'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('calls').changeable">
          <customExpressions name="referenceNameExpression" customExpression="aql:'calls'"/>
          <customOperations name="onDoubleClickOperation">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:selection->first()">
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Edit FlowAction call Dialog">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation/>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation/>
                  </buttons>
                  <page name="Edit View Action Page" labelExpression="ViewAction" domainClass="view::ViewAction" semanticCandidateExpression="var:self" extends="//@extensions.0/@categories.1/@pages.0"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </customOperations>
        </controls>
        <controls xsi:type="properties:TextAreaDescription" name="flow::FlowAction description" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('description')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('description'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('description').changeable" valueExpression="aql:self.description">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="description" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
      </groups>
      <groups name="Transition Group" labelExpression="Properties" domainClass="flow::Transition" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:TextDescription" name="flow::Transition name" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('name')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('name'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="aql:self.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="var:newValue"/>
          </initialOperation>
          <conditionalStyles preconditionExpression="aql:self.eClass().getEStructuralFeature('name').lowerBound = 1">
            <style>
              <labelFontFormat>bold</labelFontFormat>
            </style>
          </conditionalStyles>
        </controls>
        <controls xsi:type="properties:TextDescription" name="flow::Transition guard" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('guard')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('guard'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('guard').changeable" valueExpression="aql:self.guard">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="guard" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="flow::Transition modal" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('modal'))" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('modal'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('modal').changeable" valueExpression="aql:self.modal">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="modal" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="flow::Transition on" labelExpression="aql:'On :'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('on'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('on').changeable">
          <customExpressions name="referenceNameExpression" customExpression="aql:'on'"/>
          <customOperations name="onDoubleClickOperation">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:selection->first()">
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Edit Transition on as FlowEvent Dialog">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation/>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation/>
                  </buttons>
                  <page name="Edit Transition on Page" extends="//@extensions.0/@categories.2/@pages.1"/>
                </subModelOperations>
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Edit Transition on as ViewEvent Dialog">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation/>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation/>
                  </buttons>
                  <page name="Edit Transition on Page" extends="//@extensions.0/@categories.1/@pages.1"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </customOperations>
          <customOperations name="browseButtonOperation">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.openEventSelectionDialog()"/>
            </initialOperation>
          </customOperations>
        </controls>
        <controls xsi:type="properties:TextAreaDescription" name="flow::Transition description" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('description')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('description'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('description').changeable" valueExpression="aql:self.description">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="description" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="flow::Transition from" labelExpression="aql:'From :'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('from'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('from').changeable">
          <customExpressions name="referenceNameExpression" customExpression="aql:'from'"/>
        </controls>
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="flow::Transition to" labelExpression="aql:'To :'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('to'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('to').changeable">
          <customExpressions name="referenceNameExpression" customExpression="aql:'to'"/>
        </controls>
      </groups>
      <groups name="Flow Group" labelExpression="Properties" domainClass="flow::Flow" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:TextDescription" name="flow::Flow name" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('name')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('name'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="aql:self.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="var:newValue"/>
          </initialOperation>
          <conditionalStyles preconditionExpression="aql:self.eClass().getEStructuralFeature('name').lowerBound = 1">
            <style>
              <labelFontFormat>bold</labelFontFormat>
            </style>
          </conditionalStyles>
        </controls>
        <controls xsi:type="properties:TextAreaDescription" name="flow::Flow description" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('description')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('description'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('description').changeable" valueExpression="aql:self.description">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="description" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="flow::Flow events" labelExpression="aql:'Event :'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('events'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('events').changeable">
          <customExpressions name="referenceNameExpression" customExpression="aql:'events'"/>
          <customExpressions name="enableAddButtonExpression" customExpression="aql:false"/>
          <customExpressions name="enableBrowseButtonExpression" customExpression="aql:false"/>
          <customExpressions name="enableRemoveButtonExpression" customExpression="aql:false"/>
          <customOperations name="onDoubleClickOperation">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:selection->first()">
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Edit Flow Event Dialog">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation/>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation/>
                  </buttons>
                  <page name="Edit Flow Event Page" extends="//@extensions.0/@categories.2/@pages.1"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </customOperations>
        </controls>
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="flow::Flow states" labelExpression="aql:'States :'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('states'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('states').changeable">
          <customExpressions name="referenceNameExpression" customExpression="aql:'states'"/>
          <customExpressions name="enableAddButtonExpression" customExpression="aql:false"/>
          <customExpressions name="enableBrowseButtonExpression" customExpression="aql:false"/>
          <customExpressions name="enableRemoveButtonExpression" customExpression="aql:false"/>
          <customOperations name="onDoubleClickOperation">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:selection->first()">
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Edit Flow states as NamedFlowState Dialog">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation/>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation/>
                  </buttons>
                  <page name="Edit Flow state Page" extends="//@extensions.0/@categories.2/@pages.2"/>
                </subModelOperations>
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Edit Flow states as SubFlowState Dialog">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation/>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation/>
                  </buttons>
                  <page name="Edit Flow state Page" extends="//@extensions.0/@categories.2/@pages.0"/>
                </subModelOperations>
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Edit Flow states as ViewState Dialog">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation/>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation/>
                  </buttons>
                  <page name="Edit Flow state Page" extends="//@extensions.0/@categories.2/@pages.3"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </customOperations>
        </controls>
        <controls xsi:type="properties:CustomDescription" name="org.obeonetwork.is.eef.custom.reference" label="flow::Flow transitions" labelExpression="aql:'Transitions :'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('transitions'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('transitions').changeable">
          <customExpressions name="referenceNameExpression" customExpression="aql:'transitions'"/>
          <customExpressions name="enableAddButtonExpression" customExpression="aql:false"/>
          <customExpressions name="enableBrowseButtonExpression" customExpression="aql:false"/>
          <customExpressions name="enableRemoveButtonExpression" customExpression="aql:false"/>
          <customOperations name="onDoubleClickOperation">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:selection->first()">
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Edit Flow transition Dialog">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation/>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation/>
                  </buttons>
                  <page name="Edit Flow transition Page" extends="//@extensions.0/@categories.2/@pages.4"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </customOperations>
        </controls>
      </groups>
    </categories>
  </extensions>
</description:Group>
